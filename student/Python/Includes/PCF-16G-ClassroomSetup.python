{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%run ./Classroom-Setup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "ee56a9df-403a-4b63-a46e-7c8e41b29237", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "18bf86ff-a0c4-40c1-b765-fb50988aff82", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "silverStockOrdersPath = sourceDataPath + \"/silver/stock_order_spend_balance\" \ncourseAdvertisements[\"silverStockOrdersPath\"] = (\"v\", silverStockOrdersPath , silverStockOrdersPath)\n\ntargetDirectory = workingDir + \"/gold/price_time_series\" \ncourseAdvertisements[\"targetDirectory\"] = (\"v\", targetDirectory , targetDirectory)\n\ndef realityCheck(testMethod, spark, silverStockOrdersPath, targetDirectory):\n  from contextlib import redirect_stdout\n  from io import StringIO\n  from pyspark.sql.functions import round, col, window, avg, sum, year, month, dayofmonth, lag\n  from pyspark.sql.window import Window\n  \n  dumpOutput = StringIO()\n  with redirect_stdout(dumpOutput):\n    \n    resultDF = testMethod(spark, silverStockOrdersPath, targetDirectory)\n    \n    stockTransactions = (spark.read.format(\"delta\").load(silverStockOrdersPath))\n    topTwoVolume = (stockTransactions\n           .select(\"ticker\", \"volume\")\n           .groupBy(\"ticker\")\n           .agg(round(sum(col(\"volume\")), 2).alias(\"total_volume\"))\n           .orderBy(\"total_volume\", ascending=False)\n           .take(2)\n           )\n    topVolTicker = [row[\"ticker\"] for row in topTwoVolume] \n    \n    DailyRollingPrice = (\n      stockTransactions\n      .filter(col(\"ticker\").isin(topVolTicker))\n      .groupBy(window('order_timestamp','1 days','1 day'), \"ticker\")\n      .avg(\"price\")\n      .withColumn(\"avg(price)\", round(col(\"avg(price)\"), 2))\n      .orderBy('window.start', 'ticker')\n      .selectExpr(\"window.start as date\", \"ticker\", \"`avg(price)` as daily_average\")\n      .filter((year(col(\"date\")) == \"2019\") & (month(col(\"date\")) == \"9\") & (dayofmonth(col(\"date\")) <= 15))\n    )\n    \n    priceWindow = Window.partitionBy(\"ticker\").orderBy(\"date\")\n    percentChange = (DailyRollingPrice\n     .withColumn('perc_change', round((DailyRollingPrice.daily_average - lag(DailyRollingPrice['daily_average']).over(priceWindow))/100, 4))\n    )\n    \n    correctDF = percentChange\n \n  def read_delta():\n    try:\n      return spark.read.format(\"delta\").load(targetDirectory)\n    except Exception:\n      return None\n    \n  deltaTable = read_delta()\n  \n  tests = TestSuite()\n\n  tests.addTest(TestCase(id=\"PCF-15F-A\", description = \"Returns correct schema\", \n           testFunction = lambda: compareSchemas(resultDF.schema, correctDF.schema, testColumnOrder=False, testNullable=False))),\n  tests.addTest(TestCase(id=\"PCF-15F-B\", description = \"Returns DataFrame with correct number of rows\",              \n           testFunction = lambda: resultDF.count() == correctDF.count())),\n  tests.addTest(TestCase(id=\"PCF-15F-C\", description = \"Returns DataFrame with correct results\", \n           testFunction = lambda: compareDataFramesLimited(resultDF, correctDF))),\n  tests.addTest(TestCase(id=\"PCF-15F-D\", description = \"Gold table in place\",\n           testFunction = lambda: deltaTable is not None)),\n  tests.addTest(TestCase(id=\"PCF-15F-E\", description = \"Gold table has correct content\",\n           testFunction = lambda: deltaTable.count() == correctDF.count()))\n\n\n  tests.displayResults()\n  \nallDone(courseAdvertisements)\n", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "15aa526e-c497-42de-a8fa-07183606ad25", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "f49202f2-118c-461d-aca3-e7c8b4187718", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "45bacb7e-d79f-4aa1-8839-73a2c558f16b", "iPythonMetadata": null, "inputWidgets": {}, "language": "python", "name": "PCF-16G-ClassroomSetup", "origId": 0, "version": "NotebookV1"}