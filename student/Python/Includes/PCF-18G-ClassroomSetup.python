{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%run ./Classroom-Setup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "219c80c4-6e25-4a53-a7cf-051b98da05f1", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "aa13e03a-c8c0-4a3d-9636-4684a0b2eb5b", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "stockTransactionsPath = sourceDataPath + \"/silver/stock_order_spend_balance\"\ncourseAdvertisements[\"stockTransactionsPath \"] = (\"v\", stockTransactionsPath, stockTransactionsPath)\n\nallDone(courseAdvertisements)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "29669d0a-b623-478a-9a22-8f52edce2e77", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "d2655ee8-bf05-4445-b808-79a3652e180e", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "#SETUP\n\ndef realityCheck(testMethod, spark, stockTransactionsPath):\n  from contextlib import redirect_stdout\n  from io import StringIO\n  from pyspark.sql.functions import window, year, month, col, sum\n  \n  resultOutput = StringIO()\n  with redirect_stdout(resultOutput):\n    resultDF = testMethod(spark, stockTransactionsPath)\n  resultOutput = resultOutput.getvalue()\n  \n  correctOutput = StringIO()\n  with redirect_stdout(correctOutput):\n    \n    stock_transactions = (spark.read.format(\"delta\").load(stockTransactionsPath)\n                         .filter((year(col(\"order_timestamp\")) == \"2019\") & (month(col(\"order_timestamp\")) == \"9\"))\n                         )\n\n    top_10_volume = (stock_transactions\n         .select(\"ticker\", \"volume\")\n         .groupBy(\"ticker\")\n         .agg(sum(col(\"volume\")).alias(\"total_volume\"))\n         .orderBy(\"total_volume\", ascending=False)\n         .limit(10)\n         ).collect()\n\n    top_10_volume_tickers = [row[\"ticker\"] for row in top_10_volume]\n\n    correctDF = (\n    stock_transactions\n    .filter(col(\"ticker\").isin(top_10_volume_tickers))\n    .groupBy(window('order_timestamp','3 days','1 day'), \"ticker\")\n    .sum(\"volume\")\n    .orderBy('window.start', 'ticker')\n    .selectExpr(\"window.start as date\", \"ticker\", \"`sum(volume)` as three_day_total\")\n    )\n  \n  correctOutput = correctOutput.getvalue()\n\n  tests = TestSuite()\n  tests.addTest(TestCase(id=\"PCF-20G-A\", description = \"Returns correct schema\", \n           testFunction = lambda: compareSchemas(resultDF.schema, correctDF.schema, testColumnOrder=False, testNullable=True))),\n  tests.addTest(TestCase(id=\"PCF-20G-B\", description = \"Returns DataFrame with correct number of rows\",   \n           testFunction = lambda: resultDF.count() == correctDF.count())),\n  tests.addTest(TestCase(id=\"PCF-20G-C\", description = \"Returns DataFrame with correct results\", \n           testFunction = lambda: compareDataFramesLimited(resultDF, correctDF))),\n  \n  \n  tests.displayResults()\n  \ndisplayHTML(\"\"\"\nDeclared the following function:\n  <li><span style=\"color:green; font-weight:bold\">realityCheck</span></li>\n\"\"\")\n", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "84b3d28c-f8ab-49ba-9aa9-901f72389dad", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "2f1192e4-66f7-4b7f-ae5d-6c607660d2bc", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 3, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "87d6011c-b37a-4a98-93fb-128ff03de094", "iPythonMetadata": null, "inputWidgets": {}, "language": "python", "name": "PCF-18G-ClassroomSetup", "origId": 0, "version": "NotebookV1"}