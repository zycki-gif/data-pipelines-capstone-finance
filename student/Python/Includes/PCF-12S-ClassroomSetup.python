{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%run ./Classroom-Setup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "6cfe4403-04eb-4afb-b284-0c2b3b5c7747", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "39ecb077-645f-426d-a518-e9152f9aa750", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "silverStockOrdersPath = sourceDataPath + \"/silver/stock_orders\"  \ncourseAdvertisements[\"silverStockOrdersPath\"] = (\"v\", silverStockOrdersPath , silverStockOrdersPath)\n\nsilverInvestorsPath = sourceDataPath + \"/silver/investors\" \ncourseAdvertisements[\"silverInvestorsPath\"] = (\"v\", silverInvestorsPath , silverInvestorsPath)\n\nfeesPath = sourceDataPath + \"/fees.csv\" \ncourseAdvertisements[\"feesPath\"] = (\"v\", feesPath , feesPath)\n\ntargetDirectory = workingDir + \"/silver/stock_order_spend_balance\"\ncourseAdvertisements[\"targetDirectory\"] = (\"v\", targetDirectory , targetDirectory)\n\ndef realityCheck(testMethod, spark, silverStockOrdersPath, silverInvestorsPath, feesPath, targetDirectory):\n  from contextlib import redirect_stdout\n  from io import StringIO\n  from pyspark.sql.functions import col, when, lit\n  \n  dumpOutput = StringIO()\n  with redirect_stdout(dumpOutput):\n    resultDF = testMethod(spark, silverStockOrdersPath, silverInvestorsPath, feesPath, targetDirectory)\n    \n  \n  stock_orders_cleaned = (spark.read.format(\"delta\").load(silverStockOrdersPath)\n                         .drop(\"clicked_items\")\n                         )\n  investors = (spark.read.format(\"delta\").load(silverInvestorsPath)\n               .select(\"investor_id\", \"subscription_id\"))\n  fees = (spark\n          .read\n          .option(\"inferSchema\",\"true\")\n          .option(\"header\",\"true\")\n          .csv(feesPath)\n          .filter(col(\"product_id\") == 0)\n         )\n\n  res = (stock_orders_cleaned.join(investors, on=(stock_orders_cleaned[\"investor\"] == investors[\"investor_id\"]), how=\"left\")\n        .select(stock_orders_cleaned[\"*\"], investors[\"subscription_id\"])\n        )\n\n  result = (res.join(fees, on=\"subscription_id\", how=\"left\")\n           .select(res[\"*\"], fees[\"fees\"])\n           )\n  \n  correctDF = (result.withColumn(\"spend_balance\", \n                     when(\n                       col(\"type\") == \"BUY\", (lit(-1) * col(\"volume\") * col(\"price\") - col(\"fees\")))\n                       .otherwise(col(\"volume\") * col(\"price\") - col(\"fees\")))                        \n              )\n    \n    \n  updateSourceDataInDevMode(correctDF, \"silver/stock_order_spend_balance\")\n \n  def read_delta():\n    try:\n      return spark.read.format(\"delta\").load(targetDirectory)\n    except Exception:\n      return None\n  \n  deltaTable = read_delta()\n\n  tests = TestSuite()\n  \n  tests.addTest(TestCase(id=\"PCF-12S-A\", description = \"Returns correct schema\", \n           testFunction = lambda: compareSchemas(resultDF.schema, correctDF.schema, testColumnOrder=False, testNullable=True))),\n  tests.addTest(TestCase(id=\"PCF-12S-B\", description = \"Returns DataFrame with correct number of rows\",              \n           testFunction = lambda: resultDF.count() == correctDF.count())),\n  tests.addTest(TestCase(id=\"PCF-12S-C\", description = \"Returns DataFrame with correct results\", \n           testFunction = lambda: compareDataFramesLimited(resultDF, correctDF))),\n  tests.addTest(TestCase(id=\"PCF-12S-D\", description = \"Silver table in place\",\n           testFunction = lambda: deltaTable is not None)),\n  tests.addTest(TestCase(id=\"PCF-12S-E\", description = \"Silver table has correct content\",\n           testFunction = lambda: compareDataFramesLimited(deltaTable, correctDF)))\n\n  \n  tests.displayResults()\n\nallDone(courseAdvertisements)\n", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "a364954b-6621-4690-a08f-87b6f2f9ca21", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "bba43f46-bd2d-443c-9f80-369186b84aaf", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "784f2515-f78f-433b-b1c4-9ba662eae278", "iPythonMetadata": null, "inputWidgets": {}, "language": "python", "name": "PCF-12S-ClassroomSetup", "origId": 0, "version": "NotebookV1"}