{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%run ./Classroom-Setup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "6b23cbc2-dbc6-48a8-b534-03579ab23b3c", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "45b560f7-34af-42e0-95c0-df04c188fab8", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "silverLoanRequestsPath = sourceDataPath + \"/silver/loan_requests\"\ncourseAdvertisements[\"silverLoanRequestsPath\"] = (\"v\", silverLoanRequestsPath, silverLoanRequestsPath)\n\nmanualCheckPath = workingDir + \"/silver/loan_requests_for_manual_check\"\ncourseAdvertisements[\"manualCheckPath \"] = (\"v\", manualCheckPath, manualCheckPath)\n\ntargetDirectory = workingDir + \"/silver/loan_requests_cleansed.delta\"\ncourseAdvertisements[\"targetDirectory \"] = (\"v\", targetDirectory , targetDirectory)\n\ndef get_silver_loan_requests_2(silverLoanRequestsPath):\n  from pyspark.sql.functions import regexp_extract, col, when\n  import re\n  \n  res = (spark.read.format(\"delta\").load(silverLoanRequestsPath)\n       )\n\n  def get_currency(str):\n    if not str:\n      return \"\"\n    currency_str = re.sub(\"[0-9 ]+\",\"\",str)\n    return currency_str if currency_str != \"$\" else \"USD\"\n\n  get_currency_udf = udf(get_currency)\n\n  raw_currency_col = regexp_extract(col(\"request_amount\"),\"^([^0-9 ]+)\", 0)\n  currency_col = when(raw_currency_col == \"$\", \"USD\").otherwise(raw_currency_col).alias(\"currency\")\n\n  amount_col = regexp_extract(col(\"request_amount\"),\"([0-9]+)$\", 0).cast(\"integer\").alias(\"amount\")\n  \n  finalDF = res.select(\"*\", currency_col, amount_col).drop(\"request_amount\")\n  \n  finalOK = finalDF.filter(col(\"missing_amount\") == False).filter(col(\"banned_investor\") == False)\n  \n  finalCheck = finalDF.filter((col(\"missing_amount\") == True) | (col(\"banned_investor\") == True))\n\n  return (get_currency_udf, finalOK, finalCheck)\n\n\ndef realityCheck(testMethod, spark, silverLoanRequestsPath, manualCheckPath, targetDirectory):\n  from contextlib import redirect_stdout\n  from io import StringIO\n  from pyspark.sql.functions import col\n  \n  dumpOutput = StringIO()\n  with redirect_stdout(dumpOutput):\n    (rUDF, rOK, rCheck) = testMethod(spark, silverLoanRequestsPath, manualCheckPath, targetDirectory)\n    (cUDF, cOK, cCheck) = get_silver_loan_requests_2(silverLoanRequestsPath)\n    \n    updateSourceDataInDevMode(cOK, \"/silver/loan_requests_cleansed.delta\")\n    \n  def read_delta(path):\n    try:\n      return spark.read.format(\"delta\").load(path)\n    except Exception:\n      return None\n  \n  sourceTable = read_delta(silverLoanRequestsPath)\n  okTable = read_delta(targetDirectory)\n  checkTable = read_delta(manualCheckPath)\n  \n  tests = TestSuite()\n  \n  if rUDF is None:\n    tests.addTest(TestCase(id=\"PCF-13S-0\", description = \"UDF defined\", \n               testFunction = lambda: rUDF is not None))\n    tests.displayResults()\n    \n  else:\n    rUDF_unique = sourceTable.select(rUDF(\"request_amount\").alias('curr')).distinct().orderBy('curr')\n    cUDF_unique = sourceTable.select(cUDF(\"request_amount\").alias('curr')).distinct().orderBy('curr')\n\n    tests.addTest(TestCase(id=\"PCF-13S-A\", description = \"Returns DataFrame with `currency` and without the `request_amount` column\", \n             testFunction = lambda: \"currency\" in rOK.columns and not \"request_amount\" in rOK.columns))\n    \n    tests.addTest(TestCase(id=\"PCF-13S-B\", description = \"Returns DataFrame with correct `currency` values\", \n             testFunction = lambda: compareDataFramesLimited(rOK.select(\"currency\"), cOK.select(\"currency\"))))\n    \n    tests.addTest(TestCase(id=\"PCF-13S-C\", description = \"UDF returns correct values\", \n             testFunction = lambda: compareDataFramesLimited(rUDF_unique, cUDF_unique)))\n    \n    tests.addTest(TestCase(id=\"PCF-13S-E\", description = \"Returns correct schema: finalOK\", \n             testFunction = lambda: compareSchemas(rOK.schema, cOK.schema, testColumnOrder=False, testNullable=True)))\n    tests.addTest(TestCase(id=\"PCF-13S-F\", description = \"Returns correct schema: finalCheck\", \n             testFunction = lambda: compareSchemas(rCheck.schema, cCheck.schema, testColumnOrder=False, testNullable=True)))\n    tests.addTest(TestCase(id=\"PCF-13S-G\", description = \"Returns DataFrame with correct results: finalOK\", \n             testFunction = lambda: compareDataFramesLimited(rOK, cOK)))\n    tests.addTest(TestCase(id=\"PCF-13S-G2\", description = \"Returns DataFrame with correct results: finalCheck\", \n             testFunction = lambda: compareDataFramesLimited(rCheck, cCheck)))\n    tests.addTest(TestCase(id=\"PCF-13S-H\", description = \"Delta table in place: finalOK\",\n             testFunction = lambda: okTable is not None))\n    tests.addTest(TestCase(id=\"PCF-13S-I\", description = \"Delta table has correct content: finalOK\",\n             testFunction = lambda: compareDataFramesLimited(okTable, cOK)))\n    tests.addTest(TestCase(id=\"PCF-13S-J\", description = \"Delta table in place: finalCheck\",\n             testFunction = lambda: checkTable is not None))\n    tests.addTest(TestCase(id=\"PCF-13S-K\", description = \"Delta table has correct content: finalCheck\",\n             testFunction = lambda: compareDataFramesLimited(checkTable, cCheck)))\n\n    tests.displayResults()\n  \nallDone(courseAdvertisements)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "0b33bc34-3fc4-42d7-a0da-22942760d477", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "cb54ff30-8d60-438e-b1fa-2a2846dced1f", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "displayHTML(\"All done!\")\n", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "f583ad8f-53d9-428c-9eed-e344649dbd79", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "f2cfc24f-f51c-4b42-b7ed-76285d3afd15", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 3, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "c4a84602-6703-4a92-b2d2-a472ef6d3833", "iPythonMetadata": null, "inputWidgets": {}, "language": "python", "name": "PCF-10S-ClassroomSetup", "origId": 0, "version": "NotebookV1"}