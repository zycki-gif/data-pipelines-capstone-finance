{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%run ./Classroom-Setup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "f47114d3-46b4-44a2-b385-155e4205e94c", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "de4a4140-a1e1-4652-952f-2fefb7bfe5e6", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "investorsPath = sourceDataPath + \"/silver/investors\"\ncourseAdvertisements[\"investorsPath\"] = (\"v\", investorsPath , investorsPath)\n\nstockTransactionsPath = sourceDataPath + \"/silver/stock_order_spend_balance\"\ncourseAdvertisements[\"stockTransactionsPath\"] = (\"v\", stockTransactionsPath , stockTransactionsPath)\n\ntargetDirectory = workingDir + \"/gold/winning_investors\"\ncourseAdvertisements[\"targetDirectory\"] = (\"v\", targetDirectory , targetDirectory)\n\nallDone(courseAdvertisements)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "802feb8b-9ae8-4f20-87cb-0c2df74a23b7", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "83ef207e-f2b5-4fa6-acf3-5492732d4701", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "# SETUP\n\ndef realityCheck(testMethod, spark, investorsPath, stockTransactionsPath, targetDirectory):\n  from contextlib import redirect_stdout\n  from io import StringIO\n  from pyspark.sql.functions import col, sum, round\n\n  resultOutput = StringIO()\n  with redirect_stdout(resultOutput):\n    resultDF = testMethod(spark, investorsPath, stockTransactionsPath, targetDirectory)\n  resultOutput = resultOutput.getvalue()\n\n  correctOutput = StringIO()\n  with redirect_stdout(correctOutput):\n    \n    investors = (spark.read.format(\"delta\").load(investorsPath).select(\"investor_id\",\"name\"))\n    stock_transactions = (spark.read.format(\"delta\").load(stockTransactionsPath))\n\n    correctDF = (stock_transactions.join(investors, on=(investors[\"investor_id\"] == stock_transactions[\"investor\"]), how=\"left\")\n         .select(\"investor\", \"name\", \"spend_balance\", col(\"order_timestamp\").cast(\"date\").alias(\"date\"))\n         .groupBy(\"date\", \"investor\", \"name\")\n         .agg(round(sum(\"spend_balance\")).alias(\"daily_win\"))\n         .orderBy(\"daily_win\", ascending=False)\n         .limit(10)\n         )\n\n  correctOutput = correctOutput.getvalue()\n\n  def read_delta():\n    try:\n      return spark.read.format(\"delta\").load(targetDirectory)\n    except Exception:\n      return None\n\n  deltaTable = read_delta()\n\n  tests = TestSuite()\n\n  tests.addTest(TestCase(id=\"PCF-17G-A\", description = \"Returns correct schema\", \n           testFunction = lambda: compareSchemas(resultDF.schema, correctDF.schema, testColumnOrder=False, testNullable=True)))\n  tests.addTest(TestCase(id=\"PCF-17G-B\", description = \"Returns DataFrame with correct number of rows\",\n           testFunction = lambda: resultDF.count() == correctDF.count()))\n  tests.addTest(TestCase(id=\"PCF-17G-C\", description = \"Returns DataFrame with correct results\", \n           testFunction = lambda: compareDataFramesLimited(resultDF, correctDF)))\n  tests.addTest(TestCase(id=\"PCF-17G-E\", description = \"Delta table in place\",\n           testFunction = lambda: deltaTable is not None))\n  tests.addTest(TestCase(id=\"PCF-17G-G\", description = \"Delta table has correct content\",\n           testFunction = lambda: compareDataFramesLimited(deltaTable, correctDF)))\n\n  tests.displayResults()\n\ndisplayHTML(\"\"\"\nDeclared the following function:\n  <li><span style=\"color:green; font-weight:bold\">realityCheck</span></li>\n\"\"\")\n", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "ea10ae99-3a17-47f1-b206-8dda3ee35116", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "8c389f49-f7d6-493b-ac82-769dbc78dcbe", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 3, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "fa553508-946f-4eb2-9aa7-870a7ba4d1f4", "iPythonMetadata": null, "inputWidgets": {}, "language": "python", "name": "PCF-17G-ClassroomSetup", "origId": 0, "version": "NotebookV1"}