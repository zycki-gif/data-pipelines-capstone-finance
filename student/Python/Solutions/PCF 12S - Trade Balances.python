{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%md-sandbox\n\n<div style=\"text-align: center; line-height: 0; padding-top: 9px;\">\n  <img src=\"https://databricks.com/wp-content/uploads/2018/03/db-academy-rgb-1200px.png\" alt=\"Databricks Learning\" style=\"width: 1200px\">\n</div>", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "9a87c457-06af-4441-b1c8-c558639552d3", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "18a7b835-4c89-4caf-95c9-89f6786e968f", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%md-sandbox\n<img src=\"https://files.training.databricks.com/images/Apache-Spark-Logo_TM_200px.png\" style=\"float: left: margin: 20px\"/>\n\n# Bronze To Silver - Trade Balances\n\nWhen investors buy stocks, their cash balance is reduced. When they sell, their cash balance increases. Fees apply too, in association with investors' subscription type. In this notebook we are going to compute these negative and positive impacts on their cash balances.\n\n## In this exercise you will:\n* Learn how to transform and join DataFrames on different columns\n* Find out how to select columns after a join from one side of the join\n* Find out how to calculate new values based on existing columns\n* Find out how to express conditions with `when` and `otherwise`\n* Practice writing a DataFrame to a silver Delta table\n\n## Prerequisites\n* Web browser: **Chrome**\n* A cluster configured with **8 cores** and **DBR 7.0**", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "2baaceb5-175a-4f0e-942c-0e6b7daaf8ac", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "0e0c36a7-8dac-438e-a051-8b9797645fb0", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%md\n## ![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) Classroom-Setup<br>\n\nFor each lesson to execute correctly, please make sure to run the **`Classroom-Setup`** cell at the start of each lesson (see the next cell) and the **`Classroom-Cleanup`** cell at the end of each lesson.", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "ab150904-9f1a-4d24-9763-1fe7f316cb66", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "ed97768a-a193-40d7-811f-ac40e6e82e0b", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 3, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%run ./Includes/PCF-12S-ClassroomSetup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "38040b5e-4df7-4548-9224-14b6dacc0428", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "e7a17bd2-2a29-432a-af39-95f8239a4d8f", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 4, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%md\n## ![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) Steps to complete<br>\nImplement the **`challenge()`** function to achieve the following:\n\n- Currently stock orders don't include fees. Fees are changing for each subscription type. Subscription types are registered in the Investors table. We are going to read from three paths to join them so as to compute the **`spend_balance`**:\n\n  * Read the cleaned Stock Orders silver table from **`silverStockOrdersPath`** into a DataFrame and drop the **`clicked_items`** column.\n  * Read the Investors silver table from **`silverInvestorsPath`** into a DataFrame and select only the **`investor_id`** and **`subscription_id`** fields.\n  * Read the fees data from **`feesPath`** into a DataFrame and filter for the records where the **`product_id`** equals zero.\n  \n- Join Stock Orders with Investors on **`investor`** and **`investor_id`** fields. Keep all fields from Stock Orders and only the **`subscription_id`** from Investors.\n- Join the previous DataFrame with fees on **`subscription_id`**. Keep all columns from the previous DataFrame and only the **`fees`** field from the fees.\n\n- After these joins we have information on how much fee applies for each transaction in Stock Orders.\n- Generate a new columns named **`spend_balance`** with these conditions:\n  * If the **`type`** value is \"BUY\", multiply **`volume`** and **`price`**, reduce the **`fee`** and convert the result to negative. Here is the formula:\n    - spend_balance = -1 x [ (volume x price) - fees ]\n  * If the condition is not met, then you should not make it negative:\n    - spend_balance =      [ (volume x price) - fees ]\n\n- Write the resulting DataFrame to **`targetDirectory`** as a Delta table using the overwrite option.\n- Return the resulting DataFrame.\n\nThe variables **`silverStockOrdersPath`**, **`silverInvestorsPath`**, **`feesPath`**  and **`targetDirectory`** have already been defined in your environment.\n\n<p> The resulting DataFrame schema should look like this:\n  \n|name|type|\n|---|---|\n|investor|LongType|\n|ordertime|LongType|\n|price|DoubleType|\n|ticker|StringType|\n|transaction_id|LongType|\n|type|StringType|\n|volume|LongType|\n|order_timestamp|TimestampType|\n|year|IntegerType|\n|month|IntegerType|\n|day|IntegerType|\n|dow|IntegerType|\n|subscription_id|LongType|\n|fees|IntegerType|\n|spend_balance|DoubleType|\n  ", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "b4f90a59-d101-4d46-819e-2b9fbfb4815c", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "c3303ce4-aa4f-4c48-99e8-ffdf77535834", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 5, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "# ANSWER\n\ndef solution(spark, silverStockOrdersPath, silverInvestorsPath, feesPath, targetDirectory):\n  from pyspark.sql.functions import col, when, lit\n  \n  # Read the cleaned Stock Orders silver table from **`silverStockOrdersPath`** into a DataFrame and drop the **`clicked_items`** column.\n  stockOrdersCleaned = (spark.read.format(\"delta\").load(silverStockOrdersPath)\n                         .drop(\"clicked_items\")\n                         )\n  \n  # Read the Investors silver table from **`silverInvestorsPath`** into a DataFrame and select only the **`investor_id`** and **`subscription_id`** fields.\n  investors = (spark.read.format(\"delta\").load(silverInvestorsPath)\n               .select(\"investor_id\", \"subscription_id\"))\n  \n  # Read the fees data from **`feesPath`** into a DataFrame and filter for records where the **`product_id`** equals zero.\n  fees = (spark.read.option(\"inferSchema\",\"true\").option(\"header\",\"true\")\n          .csv(feesPath)\n          .filter(col(\"product_id\") == 0)\n         )\n  \n  # Join Stock Orders with Investors on the **`investor`** and the **`investor_id`** fields. \n  # Keep all fields from Stock Orders and only the **`investor_id`** from Investors.\n  res = (stockOrdersCleaned.join(investors, on=(stockOrdersCleaned[\"investor\"] == investors[\"investor_id\"]), how=\"left\")\n        .select(stockOrdersCleaned[\"*\"], investors[\"subscription_id\"])\n        )\n  \n  # Join the previous DataFrame with fees on **`subscription_id`**. Keep all columns from the previous DataFrame and only the **`fees`** field from the fees.\n  result = (res.join(fees, on=\"subscription_id\", how=\"left\")\n           .select(res[\"*\"], fees[\"fees\"])\n           )\n  \n  # Generate a new column named **`spend_balance`** with the given conditions.\n  df = (result.withColumn(\"spend_balance\", \n                     when(\n                       col(\"type\") == \"BUY\", (lit(-1) * col(\"volume\") * col(\"price\") - col(\"fees\")))\n                       .otherwise(col(\"volume\") * col(\"price\") - col(\"fees\")))                        \n       )\n\n  # Write the resulting DataFrame to **`targetDirectory`** as a Delta table using the overwrite option.\n  df.write.mode(\"overwrite\").format(\"delta\").option(\"overwriteSchema\", \"true\").save(targetDirectory) \n  \n  # Return the resulting DataFrame.\n  return df\n  \nsolutionDF = solution(spark, silverStockOrdersPath, silverInvestorsPath, feesPath, targetDirectory)\ndisplay(solutionDF)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "0a189a8a-a101-4c0a-88ee-afb67b061658", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "80353493-5dcb-4034-aa77-dc133d148e31", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 6, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%md\n<h2><img src=\"https://files.training.databricks.com/images/105/logo_spark_tiny.png\"> Reality Check</h2>\n\nRun the following cell to make sure you are on track:", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "4c9ac175-4e66-4718-baa0-85d8f0953c86", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "1e00a526-a565-4a73-a107-1c796a569edd", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 7, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "# ANSWER - Test your solution\nrealityCheck(solution, spark, silverStockOrdersPath, silverInvestorsPath, feesPath, targetDirectory)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "6ce398fa-a199-4762-a855-abbfee994c06", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "e962797d-4e84-4832-86c0-17b2d1c5f04b", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 8, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%md\n## ![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) Classroom-Cleanup<br>\n\nRun the **`Classroom-Cleanup`** cell below to remove any artifacts created by this lesson.", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "4414564f-74e3-4515-971f-fc5256052089", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "9d009f95-2563-4334-a91f-f25eb5d55557", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 9, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%run ./Includes/Classroom-Cleanup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "1487bb08-aede-409b-91db-add87b329f31", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "9c687963-f74d-4815-8afe-919df6f1f496", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 10, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%md\n## <img src=\"https://files.training.databricks.com/images/105/logo_spark_tiny.png\"> Next Steps\n\nStart the next challenge, [Clicks]($./PCF 13S - Clicks)\n", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "0e96c1a2-ab93-4e0d-a198-6c0780739261", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "aa3ac52c-e7fd-496a-a16c-00f7c7ae3f80", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 11, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%md-sandbox\n&copy; 2020 Databricks, Inc. All rights reserved.<br/>\nApache, Apache Spark, Spark and the Spark logo are trademarks of the <a href=\"http://www.apache.org/\">Apache Software Foundation</a>.<br/>\n<br/>\n<a href=\"https://databricks.com/privacy-policy\">Privacy Policy</a> | <a href=\"https://databricks.com/terms-of-use\">Terms of Use</a> | <a href=\"http://help.databricks.com/\">Support</a>", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "230abc0a-851e-4519-9d34-55a62917c018", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "4c580ba2-fe47-4cd2-bbbd-6d358fa42620", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 12, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "5b0eff0e-0393-45af-ae15-efdf0e690858", "iPythonMetadata": null, "inputWidgets": {}, "language": "python", "name": "PCF 12S - Trade Balances", "origId": 0, "version": "NotebookV1"}