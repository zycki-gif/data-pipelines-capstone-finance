{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%run ./Classroom-Setup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "3c184fa0-3bbe-4499-befd-d11ca731c9ed", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "35486abb-be4c-4067-9644-5e9423e86958", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "val silverStockOrdersPath = sourceDataPath +\"/silver/stock_orders\"\ncourseAdvertisements(\"silverStockOrdersPath\") = (\"v\", silverStockOrdersPath , silverStockOrdersPath)\n\nval targetDirectory = workingDir + \"/silver/clicked_tickers\" \ncourseAdvertisements(\"targetDirectory\") = (\"v\", targetDirectory , targetDirectory)\n\nallDone(courseAdvertisements)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "cef807de-02ad-448a-a6cc-f056225c5672", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "3f44b5a6-0494-40a3-a57f-2ac9f95c980d", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "// SETUP\n\nimport org.apache.spark.sql.SparkSession\n  \ndef realityCheck(testMethod:(SparkSession, String, String) => DataFrame, spark:SparkSession, silverStockOrdersPath:String, targetDirectory:String): Unit = {\n  \n  import org.apache.spark.sql.functions._\n  import org.apache.spark.sql.types._\n  \n  val resultDF = testMethod(spark, silverStockOrdersPath, targetDirectory)\n\n  val clickBase = (spark.read.format(\"delta\").load(silverStockOrdersPath)\n               .select(\"transaction_id\", \"investor\", \"dow\", \"clicked_items\")\n               )\n  val time_spent_udf = udf((l:Seq[Seq[String]]) => l.map(_(1).toInt).sum)\n\n  val clickBase2 = clickBase.withColumn(\"time_spent_on_site\", time_spent_udf(col(\"clicked_items\")))\n\n  val correctDF = (clickBase2\n                           .withColumn(\"clicked_item\", explode($\"clicked_items\"))\n                           .selectExpr(\"*\", \n                                       \"clicked_item[0] AS ticker_clicked\", \n                                       \"CAST(clicked_item[1] AS int) AS time_spent_on_ticker\")\n                           .drop(\"clicked_items\", \"clicked_item\")\n                          )\n\n  def read_delta() : DataFrame = {\n      try {\n        spark.read.format(\"delta\").load(targetDirectory)\n      } catch { \n        case _: Throwable => spark.emptyDataFrame \n      }\n  }\n  \n  val deltaTable = read_delta()\n  \n  val tests = new TestSuite()\n  tests.addTest(TestCase(id=\"PCF-16S-A\", description=\"Returns correct schema\",\n           testFunction = () => compareSchemas(resultDF.schema, correctDF.schema, testColumnOrder=false, testNullable=true)))\n  tests.addTest(TestCase(id=\"PCF-16S-B\", description=\"Returns DataFrame with correct number of rows\",     \n           testFunction = () => resultDF.count == correctDF.count))\n  tests.addTest(TestCase(id=\"PCF-16S-C\", description=\"Returns DataFrame with correct results\", \n           testFunction = () => compareDataFramesLimited(resultDF.drop(\"order_timestamp\"), correctDF.drop(\"order_timestamp\"))))\n  tests.addTest(TestCase(id=\"PCF-16S-D\", description = \"Delta table in place\",\n           testFunction = () => !deltaTable.isEmpty))\n  tests.addTest(TestCase(id=\"PCF-16S-E\", description = \"Delta table has correct content\",\n           testFunction = () => compareDataFramesLimited(deltaTable, correctDF)))\n  \n  \n  tests.displayResults()\n}\n  \ndisplayHTML(\"\"\"\nDeclared the following function:\n  <li><span style=\"color:green; font-weight:bold\">realityCheck</span></li>\n\"\"\")\n", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "f5da5953-6dd4-417f-994b-7df293a3f553", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "fafe70a6-61d8-45dc-b4a2-4fabf3fb15a1", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 3, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "d0553c9f-f850-4a2c-8903-f518fff07d0a", "iPythonMetadata": null, "inputWidgets": {}, "language": "scala", "name": "PCF-13S-ClassroomSetup", "origId": 0, "version": "NotebookV1"}