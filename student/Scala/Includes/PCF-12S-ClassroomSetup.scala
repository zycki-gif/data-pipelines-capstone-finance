{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%run ./Classroom-Setup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "c862d7cb-f95f-4727-b8ca-ff45a572ec49", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "b28cdac6-8ab5-4e47-926d-bb87f19612a0", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "val silverStockOrdersPath = sourceDataPath + \"/silver/stock_orders\"  \ncourseAdvertisements(\"silverStockOrdersPath\") = (\"v\", silverStockOrdersPath , silverStockOrdersPath)\n\nval silverInvestorsPath = sourceDataPath + \"/silver/investors\" \ncourseAdvertisements(\"silverInvestorsPath\") = (\"v\", silverInvestorsPath , silverInvestorsPath)\n\nval feesPath = sourceDataPath + \"/fees.csv\" \ncourseAdvertisements(\"feesPath\") = (\"v\", feesPath , feesPath)\n\nval targetDirectory = workingDir + \"/silver/stock_order_spend_balance\"\ncourseAdvertisements(\"targetDirectory\") = (\"v\", targetDirectory , targetDirectory)\n\nimport org.apache.spark.sql.SparkSession\n\ndef realityCheck(testMethod:(SparkSession, String, String, String, String) => DataFrame, spark:SparkSession, silverStockOrdersPath:String, silverInvestorsPath:String, feesPath:String, targetDirectory:String): Unit = {\n  import org.apache.spark.sql.functions._\n  import org.apache.spark.sql.types._\n  \n  val resultDF = testMethod(spark, silverStockOrdersPath, silverInvestorsPath, feesPath, targetDirectory)\n    \n  val stock_orders_cleaned = (spark.read.format(\"delta\").load(silverStockOrdersPath)\n                               .drop(\"clicked_items\")\n                             )\n  val investors = (spark.read.format(\"delta\").load(silverInvestorsPath)\n                   .select(\"investor_id\", \"subscription_id\"))\n  val fees = (spark\n          .read\n          .option(\"inferSchema\",\"true\")\n          .option(\"header\",\"true\")\n          .csv(feesPath)\n          .filter(col(\"product_id\") === 0)\n         )\n\n  val res = (stock_orders_cleaned.as(\"st\")\n             .join(investors.as(\"in\"), $\"st.investor\" === $\"in.investor_id\", \"left\")\n             .select($\"st.*\", $\"in.subscription_id\")\n            )\n\n  val result = (res.join(fees, usingColumns=Seq(\"subscription_id\"), joinType=\"left\")\n               .select(res(\"*\"), fees(\"fees\"))\n               )\n  \n  val correctDF = (result.withColumn(\"spend_balance\", \n                     when(\n                       col(\"type\") === \"BUY\", (lit(-1) * col(\"volume\") * col(\"price\") - col(\"fees\")))\n                       .otherwise(col(\"volume\") * col(\"price\") - col(\"fees\")))                        \n              )\n    \n \n  def read_delta() : DataFrame = {\n      try {\n        spark.read.format(\"delta\").load(targetDirectory)\n      } catch { \n        case _: Throwable => spark.emptyDataFrame \n      }\n      \n  }\n  \n  \n  val deltaTable = read_delta()\n  \n  val tests = new TestSuite()\n  tests.addTest(TestCase(id=\"PCF-12S-A\", description=\"Returns correct schema\",\n           testFunction = () => compareSchemas(resultDF.schema, correctDF.schema, testColumnOrder=false, testNullable=true)))\n  tests.addTest(TestCase(id=\"PCF-12S-B\", description=\"Returns DataFrame with correct number of rows\",              \n           testFunction = () => resultDF.count == correctDF.count))\n  tests.addTest(TestCase(id=\"PCF-12S-C\", description=\"Returns DataFrame with correct results\", \n           testFunction = () => compareDataFramesLimited(resultDF, correctDF)))\n  tests.addTest(TestCase(id=\"PCF-12S-D\", description = \"Delta table in place\",\n           testFunction = () => !deltaTable.isEmpty))\n  tests.addTest(TestCase(id=\"PCF-12S-E\", description = \"Silver table has correct content\",\n           testFunction = () => compareDataFramesLimited(deltaTable, correctDF)))\n  \n  tests.displayResults()\n  \n}\nallDone(courseAdvertisements)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "f3d446d9-0e21-4439-9451-75d44fb1e2cd", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "ef63b55e-ac6d-4624-9550-56ee2bba7792", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "f5e32142-1bcf-4492-8aa7-529048833295", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "aa2a5aa5-5390-4857-94c2-230a43b62ee1", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 3, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "046958d3-e79d-409b-a226-3343bccf579e", "iPythonMetadata": null, "inputWidgets": {}, "language": "scala", "name": "PCF-12S-ClassroomSetup", "origId": 0, "version": "NotebookV1"}