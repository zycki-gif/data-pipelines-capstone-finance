{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%run ./Classroom-Setup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "e90989f0-c437-4cab-ab1d-be7f84959873", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "e43f5424-37dd-4f8c-8069-2ffbeaa34e64", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "val stockTransactionsPath = sourceDataPath + \"/silver/stock_order_spend_balance\"\ncourseAdvertisements(\"stockTransactionsPath \") = (\"v\", stockTransactionsPath , stockTransactionsPath)\n\nallDone(courseAdvertisements)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "7c3801be-f035-4cf9-ba0a-50c663c00bdd", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "f3822b38-d943-48d8-93b5-aa6d91410d04", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "// SETUP\nimport org.apache.spark.sql.SparkSession\ndef realityCheck(testMethod:(SparkSession, String) => DataFrame, spark:SparkSession, stockTransactionsPath:String): Unit = {\n  import org.apache.spark.sql.functions._\n  import org.apache.spark.sql.types._\n  import java.io.ByteArrayOutputStream\n  \n  val resultDF = testMethod(spark, stockTransactionsPath)\n  \n  val stock_transactions = (spark.read.format(\"delta\").load(stockTransactionsPath)\n                           .filter((year(col(\"order_timestamp\")) === \"2019\") && (month(col(\"order_timestamp\")) === \"9\"))\n                           )\n\n  val top_10_volume = (stock_transactions\n       .select(\"ticker\", \"volume\")\n       .groupBy(\"ticker\")\n       .agg(sum(col(\"volume\")).alias(\"total_volume\"))\n       .orderBy(desc(\"total_volume\"))\n       .select(\"ticker\") // only return a single column\n       .limit(10)\n       ).collect()\n  \n  val top_10_volume_tickers = top_10_volume.map(_.getString(0))\n  \n  val correctDF = (\n  stock_transactions\n  .filter(col(\"ticker\").isin(top_10_volume_tickers:_*))\n  .groupBy(window($\"order_timestamp\",\"3 days\",\"1 day\"), $\"ticker\")\n  .sum(\"volume\")\n  .orderBy(\"window.start\", \"ticker\")\n  .selectExpr(\"window.start as date\", \"ticker\", \"`sum(volume)` as three_day_total\")\n  \n  )\n  \n  val resultOutput = new ByteArrayOutputStream\n  val correctOutput = new ByteArrayOutputStream\n\n  Console.withOut(resultOutput) {testMethod(spark, stockTransactionsPath)}\n  Console.withOut(correctOutput) {correctDF.show()}\n  \n  val tests = new TestSuite()\n  tests.addTest(TestCase(id=\"PCF-20G-A\", description=\"Returns correct schema\",\n           testFunction = () => compareSchemas(resultDF.schema, correctDF.schema, testColumnOrder=false, testNullable=true)))\n  tests.addTest(TestCase(id=\"PCF-20G-B\", description=\"Returns DataFrame with correct number of rows\",     \n           testFunction = () => resultDF.count == correctDF.count))\n  tests.addTest(TestCase(id=\"PCF-20G-C\", description=\"Returns DataFrame with correct results\", \n           testFunction = () => compareDataFramesLimited(resultDF, correctDF)))\n  \n  \n  tests.displayResults()\n\n}\n\ndisplayHTML(\"\"\"\nDeclared the following function:\n  <li><span style=\"color:green; font-weight:bold\">realityCheck</span></li>\n\"\"\")\n", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "de272c57-3f54-4c48-82fb-73ddc5de969b", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "60071bd0-0324-48c2-951b-bc5e0a04ee70", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 3, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "7e5f8a02-5bdd-498d-8518-9240c1050471", "iPythonMetadata": null, "inputWidgets": {}, "language": "scala", "name": "PCF-18G-ClassroomSetup", "origId": 0, "version": "NotebookV1"}