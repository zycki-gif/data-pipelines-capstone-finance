{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%run ./Classroom-Setup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "eb0afdee-aa19-4a50-bbd1-57bdd276b4ae", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "b16813fc-b7c1-4c07-bcda-7261e13e8a4f", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "val investorsPath = sourceDataPath + \"/silver/investors\"\ncourseAdvertisements(\"investorsPath\") = (\"v\", investorsPath , investorsPath)\n\nval stockTransactionsPath = sourceDataPath + \"/silver/stock_order_spend_balance\"\ncourseAdvertisements(\"stockTransactionsPath\") = (\"v\", stockTransactionsPath , stockTransactionsPath)\n\nval targetDirectory = workingDir + \"/gold/winning_investors\"\ncourseAdvertisements(\"targetDirectory\") = (\"v\", targetDirectory , targetDirectory)\n\nallDone(courseAdvertisements)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "326df4e2-0f74-47d2-9fc2-c127a50363ee", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "549d094a-d8d8-410d-aa83-b040dfb941c5", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "//%python\n//from pyspark.sql.functions import col, sum, round\n//investors = (spark.read.format(\"delta\").load(investorsPath).select(\"investor_id\",\"name\"))\n//stock_transactions = (spark.read.format(\"delta\").load(stockTransactionsPath))\n//\n//resultDF = (stock_transactions.join(investors, on=(investors[\"investor_id\"] == stock_transactions[\"investor\"]), how=\"left\")\n//     .select(\"investor\", \"name\", \"spend_balance\", col(\"order_timestamp\").cast(\"date\").alias(\"date\"))\n//     .groupBy(\"date\", \"investor\", \"name\")\n//     .agg(round(sum(\"spend_balance\")).alias(\"daily_win\"))\n//     .orderBy(\"daily_win\", ascending=False)\n//     .limit(10)\n//     )\n//\n//display(resultDF)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "a7d57aa7-59d5-452d-be4e-e7860bdbf8ff", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "abb41a0c-e85a-4ccc-81a2-cd1aa21cd007", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 3, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "//%python\n//from pyspark.sql.functions import col, sum, round\n//investors = (spark.read.format(\"delta\").load(investorsPath).select(\"investor_id\",\"name\"))\n//stock_transactions = (spark.read.format(\"delta\").load(stockTransactionsPath))\n//\n//correctDF = (stock_transactions.join(investors, on=(investors[\"investor_id\"] == stock_transactions[\"investor\"]), how=\"left\")\n//     .select(\"investor\", \"name\", \"spend_balance\", col(\"order_timestamp\").cast(\"date\").alias(\"date\"))\n//     .groupBy(\"date\", \"investor\", \"name\")\n//     .agg(round(sum(\"spend_balance\")).alias(\"daily_win\"))\n//     .orderBy(\"daily_win\", ascending=False)\n//     .limit(10)\n//     )\n//\n//display(correctDF)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "a663e7b6-79ca-41ba-a058-6f7158125dd1", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "90c5785f-8b9d-4dde-a733-18ceed0706aa", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 4, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "//%python\n//tests = TestSuite()\n//tests.addTest(TestCase(id=\"PCF-XXX-C\", description = \"Returns DataFrame with correct results\", \n//           testFunction = lambda: compareDataFramesLimited(resultDF, correctDF)))\n//\n//tests.displayResults()", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "3c7879b7-62c8-4a7e-a7b0-201e6734609a", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "c3a5c045-0821-42a7-ba99-c2f127479f4a", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 5, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "//%python\n//\n//display(resultDF.subtract(correctDF))", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "6762cb90-5eb5-4a19-8c80-e1398b22c5e8", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "8dbcfc5a-43d3-4a3a-a6f7-09e5f3aa0e38", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 6, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "// SETUP\n\nimport org.apache.spark.sql.SparkSession\n\ndef realityCheck(testMethod:(SparkSession, String, String, String) => DataFrame, spark:SparkSession, investorsPath:String, stockTransactionsPath:String, targetDirectory:String): Unit = {\n  \n  import org.apache.spark.sql.functions._\n  import org.apache.spark.sql.types._\n  import java.io.ByteArrayOutputStream\n  \n  val resultDF = testMethod(spark, investorsPath, stockTransactionsPath, targetDirectory)\n  \n  val investors = (spark.read.format(\"delta\").load(investorsPath).select(\"investor_id\",\"name\"))\n  \n  val stock_transactions = (spark.read.format(\"delta\").load(stockTransactionsPath))\n\n  val correctDF = (stock_transactions.join(investors, (investors(\"investor_id\") === stock_transactions(\"investor\")), \"left\")\n         .select($\"investor\", $\"name\", $\"spend_balance\", $\"order_timestamp\".cast(\"date\").alias(\"date\"))\n         .groupBy(\"date\", \"investor\", \"name\")\n         .agg(round(sum(\"spend_balance\")).alias(\"daily_win\"))\n         .orderBy(desc(\"daily_win\"))\n         .limit(10)\n         )\n  \n  val resultOutput = new ByteArrayOutputStream\n  val correctOutput = new ByteArrayOutputStream\n  \n  def read_delta() : DataFrame = {\n      try {\n        spark.read.format(\"delta\").load(targetDirectory)\n      } catch { \n        case _: Throwable => spark.emptyDataFrame \n      }\n  }\n  \n  val deltaTable = read_delta()\n  \n  val tests = new TestSuite()\n  \n  tests.addTest(TestCase(id=\"PCF-17G-A\", description = \"Returns correct schema\",\n           testFunction = () => compareSchemas(resultDF.schema, correctDF.schema, testColumnOrder=false, testNullable=true)))\n  tests.addTest(TestCase(id=\"PCF-17G-B\", description = \"Returns DataFrame with correct number of rows\",              \n           testFunction = () => resultDF.count == correctDF.count))\n  tests.addTest(TestCase(id=\"PCF-17G-C\", description=\"Returns DataFrame with correct results\", \n           testFunction = () => compareDataFramesLimited(resultDF, correctDF)))\n  tests.addTest(TestCase(id=\"PCF-17G-E\", description = \"Delta Table in place\",\n         testFunction = () => !deltaTable.isEmpty))\n  tests.addTest(TestCase(id=\"PCF-17G-G\", description = \"Delta Table has correct content\",\n           testFunction = () => compareDataFramesLimited(deltaTable, correctDF)))\n \n tests.displayResults()\n  \n}\n  \ndisplayHTML(\"\"\"\nDeclared the following function:\n  <li><span style=\"color:green; font-weight:bold\">realityCheck</span></li>\n\"\"\")\n", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "52ba7062-d514-41f3-a5ac-c7dba6717de0", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "e59c17b5-09c2-4e28-9439-e8d62eebbea8", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 7, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "5d6cbc7c-f6ea-493f-b6e0-c58fc28c689c", "iPythonMetadata": null, "inputWidgets": {}, "language": "scala", "name": "PCF-17G-ClassroomSetup", "origId": 0, "version": "NotebookV1"}