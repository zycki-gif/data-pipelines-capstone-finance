{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%run ./Classroom-Setup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "5f1630eb-59de-480b-84cb-d52d0dce3c69", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "58ea2d08-1d05-4935-8486-2f8ee0b2578c", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "val silverLoanRequestsPath = sourceDataPath + \"/silver/loan_requests\"\ncourseAdvertisements(\"silverLoanRequestsPath\") = (\"v\", silverLoanRequestsPath, silverLoanRequestsPath)\n\nval manualCheckPath = workingDir + \"/silver/loan_requests_for_manual_check\"\ncourseAdvertisements(\"manualCheckPath \") = (\"v\", manualCheckPath, manualCheckPath)\n\nval targetDirectory = workingDir + \"/silver/loan_requests_cleansed.delta\"\ncourseAdvertisements(\"targetDirectory \") = (\"v\", targetDirectory , targetDirectory)\n\nval GET_CURRENCY_UDF_PLACEHOLDER = org.apache.spark.sql.functions.udf((str:String) => \"N/A\")\n\ndef get_silver_loan_requests_2(silverLoanRequestsPath:String) : (org.apache.spark.sql.expressions.UserDefinedFunction, org.apache.spark.sql.DataFrame, org.apache.spark.sql.DataFrame) = {\n  import org.apache.spark.sql.functions._\n  val res = spark.read.format(\"delta\").load(silverLoanRequestsPath)\n\n  val getCurrencyUdf = udf((str:String) => {\n      str match {\n          case null => \"\"\n          case _ => { \n            val currencyStr = str.replaceAll(\"[0-9 ]+\",\"\")\n            currencyStr match {\n              case \"$\" => \"USD\"\n              case _ => currencyStr\n            }\n          }\n      }\n  })\n\n  val raw_price_currency_col = regexp_extract(col(\"request_amount\"),\"^([^0-9 ]+)\", 0)\n  val price_currency_col = when(raw_price_currency_col === \"$\", \"USD\").otherwise(raw_price_currency_col).alias(\"currency\")\n  val price_amount_col = regexp_extract(col(\"request_amount\"),\"([0-9]+)$\", 0).cast(\"integer\").alias(\"amount\")\n  val finalDF = res.select(col(\"*\"), price_currency_col, price_amount_col).drop(\"request_amount\")\n\n  val finalOK = finalDF.filter(col(\"missing_amount\") === false).filter(col(\"banned_investor\") === false)\n  \n  val finalCheck = finalDF.filter((col(\"missing_amount\") === true) || (col(\"banned_investor\") === true))\n  \n  return (getCurrencyUdf, finalOK, finalCheck)\n}\n\ndef realityCheck(testMethod:(org.apache.spark.sql.SparkSession, String, String, String)=>(org.apache.spark.sql.expressions.UserDefinedFunction, org.apache.spark.sql.DataFrame, org.apache.spark.sql.DataFrame), spark:org.apache.spark.sql.SparkSession, silverLoanRequestsPath:String, manualCheckPath:String, targetDirectory:String): Unit = {\n  import org.apache.spark.sql.functions._\n  import java.io.ByteArrayOutputStream\n  \n  val resultOutput = new ByteArrayOutputStream\n  val correctOutput = new ByteArrayOutputStream\n\n  val (rUDF, rOK, rCheck) = testMethod(spark, silverLoanRequestsPath, manualCheckPath, targetDirectory)\n  val (cUDF, cOK, cCheck) = get_silver_loan_requests_2(silverLoanRequestsPath) \n  \n  def read_delta(path:String) : DataFrame = {\n      try {\n        spark.read.format(\"delta\").load(path)\n      } catch { \n        case _: Throwable => spark.emptyDataFrame \n      }\n  }\n  \n  val sourceTable = (spark.read.format(\"delta\").load(silverLoanRequestsPath))\n  val okTable = read_delta(targetDirectory)\n  val checkTable = read_delta(manualCheckPath)\n  \n  val tests = TestSuite()\n\n  if (rUDF == GET_CURRENCY_UDF_PLACEHOLDER){\n      tests.addTest(TestCase(id=\"PCF-13S-0\", description = \"UDF defined\", \n                    testFunction = () => false))\n  } else {\n      val rUDF_unique = sourceTable.select(rUDF(col(\"request_amount\")).alias(\"curr\")).distinct().orderBy(\"curr\")\n      val cUDF_unique = sourceTable.select(cUDF(col(\"request_amount\")).alias(\"curr\")).distinct().orderBy(\"curr\")\n\n      tests.addTest(TestCase(id=\"PCF-13S-A\", description = \"Returns DataFrame with `currency` and without the `request_amount` column\", \n               testFunction = () => rOK.columns.contains(\"currency\") && !rOK.columns.contains(\"request_amount\")))\n      tests.addTest(TestCase(id=\"PCF-13S-B\", description = \"Returns DataFrame with correct `currency` values\",\n testFunction = () => compareDataFramesLimited(rOK.select(\"currency\"), cOK.select(\"currency\"))))\n      tests.addTest(TestCase(id=\"PCF-13S-C\", description = \"UDF returns correct values\", \n                 testFunction = () => compareDataFramesLimited(rUDF_unique, cUDF_unique)))\n      tests.addTest(TestCase(id=\"PCF-13S-E\", description = \"Returns correct schema: finalOK\", \n               testFunction = () =>  compareSchemas(rOK.schema, cOK.schema, testColumnOrder=false, testNullable=true)))\n      tests.addTest(TestCase(id=\"PCF-13S-F\", description = \"Returns correct schema: finalCheck\", \n               testFunction = () =>  compareSchemas(rCheck.schema, cCheck.schema, testColumnOrder=false, testNullable=true)))\n      tests.addTest(TestCase(id=\"PCF-13S-G\", description = \"Returns DataFrame with correct results: finalOK\", \n               testFunction = () =>  compareDataFramesLimited(rOK, cOK)))\n      tests.addTest(TestCase(id=\"PCF-13S-G2\", description = \"Returns DataFrame with correct results: finalCheck\", \n               testFunction = () =>  compareDataFramesLimited(rCheck, cCheck)))\n      tests.addTest(TestCase(id=\"PCF-13S-H\", description = \"Delta table in place: finalOK\",\n               testFunction = () => !okTable.isEmpty))\n      tests.addTest(TestCase(id=\"PCF-13S-I\", description = \"Delta table has correct content: finalOK\",\n               testFunction = () => compareDataFramesLimited(okTable, cOK)))\n      tests.addTest(TestCase(id=\"PCF-13S-J\", description = \"Delta table in place: finalCheck\",\n               testFunction = () => !checkTable.isEmpty))\n      tests.addTest(TestCase(id=\"PCF-13S-K\", description = \"Delta table has correct content: finalCheck\",\n               testFunction = () => compareDataFramesLimited(checkTable, cCheck)))\n  }\n  tests.displayResults()\n}\n\nallDone(courseAdvertisements)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "8d02d930-9caa-4700-90dd-f9987c4fe1a4", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "f3829a05-e639-4cd1-a56b-18c93dd92b7b", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "displayHTML(\"All done!\")\n", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "9429ba51-59aa-42ba-82e9-0fb1ba76f570", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "b4774a0d-7211-4a4d-b9ff-171ee044bc8b", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 3, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "d2510ed5-17cd-4eaa-96eb-417dd24798af", "iPythonMetadata": null, "inputWidgets": {}, "language": "scala", "name": "PCF-10S-ClassroomSetup", "origId": 0, "version": "NotebookV1"}