{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%run ./Classroom-Setup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "bc58948c-8fb6-4dd9-8288-cb209197ed37", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "8124f579-e5c5-4ace-917d-3f6269763274", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "val silverStockOrdersPath = sourceDataPath + \"/silver/stock_order_spend_balance\" \ncourseAdvertisements(\"silverStockOrdersPath\") = (\"v\", silverStockOrdersPath , silverStockOrdersPath)\n\nval targetDirectory = workingDir + \"/gold/price_time_series\" \ncourseAdvertisements(\"targetDirectory\") = (\"v\", targetDirectory , targetDirectory)\n\ndef realityCheck(testMethod:(org.apache.spark.sql.SparkSession, String, String) => DataFrame, spark:org.apache.spark.sql.SparkSession, silverStockOrdersPath:String, targetDirectory:String): Unit = {\n  \n  import org.apache.spark.sql.functions._\n  import org.apache.spark.sql.expressions.Window\n  import org.apache.spark.sql.types._\n  \n  val resultDF = testMethod(spark, silverStockOrdersPath, targetDirectory)\n  \n\n    val stockTransactions = (spark.read.format(\"delta\").load(silverStockOrdersPath))\n    val topTwoVolume = (stockTransactions\n           .select(\"ticker\", \"volume\")\n           .groupBy(\"ticker\")\n           .agg(round(sum(col(\"volume\")), 2).alias(\"total_volume\"))\n           .orderBy(desc(\"total_volume\"))\n           .take(2)\n           )\n    val topVolTicker = topTwoVolume.map(_.getString(0)) \n    \n    \n    val DailyRollingPrice = (\n      stockTransactions\n      .filter(col(\"ticker\").isin(topVolTicker:_*))\n      .groupBy(window(col(\"order_timestamp\"), \"1 days\", \"1 day\"), col(\"ticker\"))\n      .avg(\"price\")\n      .withColumn(\"avg(price)\", round(col(\"avg(price)\"), 2))\n      .orderBy(\"window.start\", \"ticker\")\n      .selectExpr(\"window.start as date\", \"ticker\", \"`avg(price)` as daily_average\")\n      .filter((year(col(\"date\")) === \"2019\") && (month(col(\"date\")) === \"9\") && (dayofmonth(col(\"date\")) <= 15))\n    )\n  \n    \n    val priceWindow = Window.partitionBy(\"ticker\").orderBy(col(\"date\"))\n    val percentChange = (DailyRollingPrice\n     .withColumn(\"perc_change\", round((DailyRollingPrice(\"daily_average\") - lag(DailyRollingPrice(\"daily_average\"), 1).over(priceWindow))/100, 4))\n                         )\n    \n    val correctDF = percentChange\n  \n\n  def read_delta() : DataFrame = {\n      try {\n        spark.read.format(\"delta\").load(targetDirectory)\n      } catch { \n        case _: Throwable => spark.emptyDataFrame \n      }\n  }\n  \n  val deltaTable = read_delta()\n  \n  val tests = new TestSuite()\n  \n  \n  tests.addTest(TestCase(id=\"PCF-15G-A\", description = \"Returns correct schema\",\n           testFunction = () => compareSchemas(resultDF.schema, correctDF.schema, testColumnOrder=false, testNullable=false)))\n  tests.addTest(TestCase(id=\"PCF-15G-B\", description = \"Returns DataFrame with correct number of rows\",              \n           testFunction = () => resultDF.count == correctDF.count))\n  tests.addTest(TestCase(id=\"PCF-15G-C\", description = \"Returns DataFrame with correct results\", \n           testFunction = () => compareDataFramesLimited(resultDF, correctDF)))\n  tests.addTest(TestCase(id=\"PCF-15G-D\", description = \"Gold Table in place\",\n           testFunction = () => !deltaTable.isEmpty))\n  tests.addTest(TestCase(id=\"PCF-15G-E\", description = \"Gold Table has correct content\",\n           testFunction = () => compareDataFramesLimited(deltaTable, correctDF)))\n  \n  \n  tests.displayResults()\n}\nallDone(courseAdvertisements)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "19ef111d-dc36-4eba-827c-0f91368b85f8", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "31d5dc46-22ff-4c2f-81ca-b5a1d08ac1e1", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "88ca6e3f-df93-470b-a2ed-a05503920946", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "d33e26ed-1d09-487b-b73d-27267c4e570d", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 3, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "1e0c7283-595e-40ce-b7fc-b0c1c18353af", "iPythonMetadata": null, "inputWidgets": {}, "language": "scala", "name": "PCF-16G-ClassroomSetup", "origId": 0, "version": "NotebookV1"}