{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%run ./Classroom-Setup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "e5c98652-7476-487c-92bf-5212c168977a", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "040bf0e2-c06d-4904-ad9a-ac8fa90d824e", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "silverLoanRequestsPath = sourceDataPath + \"/silver/loan_requests_cleansed.delta\" \ncourseAdvertisements[\"silverLoanRequestsPath\"] = (\"v\", silverLoanRequestsPath , silverLoanRequestsPath)\n\nsilverStockOrdersPath = sourceDataPath + \"/silver/stock_order_spend_balance\" \ncourseAdvertisements[\"silverStockOrdersPath\"] = (\"v\", silverStockOrdersPath , silverStockOrdersPath)\n\ntargetDirectory = workingDir + \"/gold/trades_vs_loans\" \ncourseAdvertisements[\"targetDirectory\"] = (\"v\", targetDirectory , targetDirectory)\n\ndef realityCheck(testMethod, spark, silverLoanRequestsPath, silverStockOrdersPath, targetDirectory):\n  from contextlib import redirect_stdout\n  from io import StringIO\n  from pyspark.sql.functions import col\n  \n  resultOutput = StringIO()\n  with redirect_stdout(resultOutput):\n    resultDF = testMethod(spark, silverLoanRequestsPath, silverStockOrdersPath, targetDirectory)\n  resultOutput = resultOutput.getvalue()\n  \n  correctOutput = StringIO()\n  with redirect_stdout(correctOutput):\n    \n    loanRequests = (spark.read.format(\"delta\").load(silverLoanRequestsPath))\n    stockTransactions = (spark.read.format(\"delta\").load(silverStockOrdersPath))\n\n    loanRequests.createOrReplaceTempView(\"loans_sol\")\n    stockTransactions.createOrReplaceTempView(\"stocks_sol\")\n  \n    correctDF = spark.sql(\"\"\"SELECT \n                      l.investor_id, l.loan_alert, \n                      l.amount, s.total_spend_balance\n                      FROM\n                      loans_sol l\n                      JOIN (SELECT investor, SUM(spend_balance) total_spend_balance, month, year \n                            FROM stocks_sol\n                            GROUP BY investor, year, month\n                            ) s \n                      ON(s.investor = l.investor_id)\n                      WHERE l.loan_alert = \"green\" AND\n                            s.month = \"9\" AND s.year = \"2019\"\n                      \"\"\")\n    updateSourceDataInDevMode(correctDF, \"/gold/trades_vs_loans\")\n    \n    correctDF.printSchema()\n  \n  correctOutput = correctOutput.getvalue()\n  \n  def read_delta():\n    try:\n      return spark.read.format(\"delta\").load(targetDirectory)\n    except Exception:\n      return None\n  \n  deltaTable = read_delta()\n\n  tests = TestSuite()\n  \n  tests.addTest(TestCase(id=\"PCF-14G-A\", description = \"Returns correct schema\", \n           testFunction = lambda: compareSchemas(resultDF.schema, correctDF.schema, testColumnOrder=False, testNullable=True)))\n  tests.addTest(TestCase(id=\"PCF-14G-B\", description = \"Returns DataFrame with correct number of rows\",\n           testFunction = lambda: resultDF.count() == correctDF.count()))\n  tests.addTest(TestCase(id=\"PCF-14G-C\", description = \"Returns DataFrame with correct results\", \n           testFunction = lambda: compareDataFramesLimited(resultDF, correctDF)))\n  tests.addTest(TestCase(id=\"PCF-14G-D\", description = \"Prints expected output\", \n       testFunction = lambda: correctOutput in resultOutput and resultOutput in correctOutput)),\n  tests.addTest(TestCase(id=\"PCF-14G-E\", description = \"Delta table in place\",\n           testFunction = lambda: deltaTable is not None))\n  tests.addTest(TestCase(id=\"PCF-14G-G\", description = \"Delta table has correct content\",\n           testFunction = lambda: compareDataFramesLimited(deltaTable, correctDF)))\n  \n  tests.displayResults()\n  \n  spark.dropTempView(\"loans_sol\")\n  spark.dropTempView(\"stocks_sol\")\n  \nallDone(courseAdvertisements)\n", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "488e092a-9257-4892-a928-7ce9a2a6d992", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "a5cba9fe-3801-488e-b43a-b5d7d297a70f", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "7c996359-4316-4057-87e0-cce9fecb15ea", "iPythonMetadata": null, "inputWidgets": {}, "language": "python", "name": "PCF-15G-ClassroomSetup", "origId": 0, "version": "NotebookV1"}