{"commands": [{"bindings": {}, "collapsed": false, "command": "\n#############################################\n# TAG API FUNCTIONS\n#############################################\n\n# Get all tags\ndef getTags() -> dict: \n  return sc._jvm.scala.collection.JavaConversions.mapAsJavaMap(\n    dbutils.entry_point.getDbutils().notebook().getContext().tags()\n  )\n\n# Get a single tag's value\ndef getTag(tagName: str, defaultValue: str = None) -> str:\n  values = getTags()[tagName]\n  try:\n    if len(values) > 0:\n      return values\n  except:\n    return defaultValue\n\n#############################################\n# Get Databricks runtime major and minor versions\n#############################################\n\ndef getDbrMajorAndMinorVersions() -> (int, int):\n  import os\n  dbrVersion = os.environ[\"DATABRICKS_RUNTIME_VERSION\"]\n  dbrVersion = dbrVersion.split(\".\")\n  return (int(dbrVersion[0]), int(dbrVersion[1]))\n\n# Get Python version\ndef getPythonVersion() -> str:\n  import sys\n  pythonVersion = sys.version[0:sys.version.index(\" \")]\n  spark.conf.set(\"com.databricks.training.python-version\", pythonVersion)\n  return pythonVersion\n\n#############################################\n# USER, USERNAME, AND USERHOME FUNCTIONS\n#############################################\n\n# Get the user's username\ndef getUsername() -> str:\n  import uuid\n  try:\n    return dbutils.widgets.get(\"databricksUsername\")\n  except:\n    return getTag(\"user\", str(uuid.uuid1()).replace(\"-\", \"\"))\n\n# Get the user's userhome\ndef getUserhome() -> str:\n  username = getUsername()\n  return \"dbfs:/user/{}\".format(username)\n\ndef getModuleName() -> str: \n  # This will/should fail if module-name is not defined in the Classroom-Setup notebook\n  return spark.conf.get(\"com.databricks.training.module-name\")\n\ndef getLessonName() -> str:\n  # If not specified, use the notebook's name.\n  return dbutils.entry_point.getDbutils().notebook().getContext().notebookPath().getOrElse(None).split(\"/\")[-1]\n\ndef getWorkingDir(courseType:str) -> str:\n  import re\n  langType = \"p\" # for python\n  moduleName = re.sub(r\"[^a-zA-Z0-9]\", \"_\", getModuleName()).lower()\n  lessonName = re.sub(r\"[^a-zA-Z0-9]\", \"_\", getLessonName()).lower()\n  workingDir = \"{}/{}/{}_{}{}\".format(getUserhome(), moduleName, lessonName, langType, courseType)\n  return workingDir.replace(\"__\", \"_\").replace(\"__\", \"_\").replace(\"__\", \"_\").replace(\"__\", \"_\")\n\n\n#############################################\n# VERSION ASSERTION FUNCTIONS\n#############################################\n\n# When migrating DBR versions this should be one\n# of the only two places that needs to be updated\nlatestDbrMajor = 7\nlatestDbrMinor = 0\n\n  # Assert an appropriate Databricks Runtime version\ndef assertDbrVersion(expected:str, latestMajor:int=latestDbrMajor, latestMinor:int=latestDbrMinor, display:bool = True):\n  \n  expMajor = latestMajor\n  expMinor = latestMinor\n  \n  if expected and expected != \"{{dbr}}\":\n    expMajor = int(expected.split(\".\")[0])\n    expMinor = int(expected.split(\".\")[1])\n\n  (major, minor) = getDbrMajorAndMinorVersions()\n\n  if (major < expMajor) or (major == expMajor and minor < expMinor):\n    msg = f\"This notebook must be run on DBR {expMajor}.{expMinor} or newer. Your cluster is using {major}.{minor}. You must update your cluster configuration before proceeding.\"\n\n    raise AssertionError(msg)\n    \n  if major != expMajor or minor != expMinor:\n    html = f\"\"\"\n      <div style=\"color:red; font-weight:bold\">WARNING: This notebook was tested on DBR {expMajor}.{expMinor}, but we found DBR {major}.{minor}.</div>\n      <div style=\"font-weight:bold\">Using an untested DBR may yield unexpected results and/or various errors</div>\n      <div style=\"font-weight:bold\">Please update your cluster configuration and/or <a href=\"https://academy.databricks.com/\" target=\"_blank\">download a newer version of this course</a> before proceeding.</div>\n    \"\"\"\n\n  else:\n    html = f\"Running on <b>DBR {major}.{minor}</b>\"\n  \n  if display:\n    displayHTML(html)\n  else:\n    print(html)\n  \n  return f\"{major}.{minor}\"\n\n# Assert that the Databricks Runtime is ML version\n# def assertIsMlRuntime(testValue: str = None):\n\n#   if testValue is not None: sourceValue = testValue\n#   else: sourceValue = getRuntimeVersion()\n\n#   if \"-ml-\" not in sourceValue:\n#     raise AssertionError(f\"This notebook must be ran on a Databricks ML Runtime, found {sourceValue}.\")\n\n    \n############################################\n# USER DATABASE FUNCTIONS\n############################################\n\ndef getDatabaseName(courseType:str, username:str, moduleName:str, lessonName:str) -> str:\n  import re\n  langType = \"p\" # for python\n  databaseName = username + \"_\" + moduleName + \"_\" + lessonName + \"_\" + langType + courseType\n  databaseName = databaseName.lower()\n  databaseName = re.sub(\"[^a-zA-Z0-9]\", \"_\", databaseName)\n  return databaseName.replace(\"__\", \"_\").replace(\"__\", \"_\").replace(\"__\", \"_\").replace(\"__\", \"_\")\n\n\n# Create a user-specific database\ndef createUserDatabase(courseType:str, username:str, moduleName:str, lessonName:str) -> str:\n  databaseName = getDatabaseName(courseType, username, moduleName, lessonName)\n\n  spark.sql(\"CREATE DATABASE IF NOT EXISTS {}\".format(databaseName))\n  spark.sql(\"USE {}\".format(databaseName))\n\n  return databaseName\n\n    \n#############################################\n# LEGACY TESTING FUNCTIONS\n#############################################\n\n# Test results dict to store results\ntestResults = dict()\n\n# Hash a string value\ndef toHash(value):\n  from pyspark.sql.functions import hash\n  from pyspark.sql.functions import abs\n  values = [(value,)]\n  return spark.createDataFrame(values, [\"value\"]).select(abs(hash(\"value\")).cast(\"int\")).first()[0]\n\n# Clear the testResults map\ndef clearYourResults(passedOnly = True):\n  whats = list(testResults.keys())\n  for what in whats:\n    passed = testResults[what][0]\n    if passed or passedOnly == False : del testResults[what]\n\n# Validate DataFrame schema\ndef validateYourSchema(what, df, expColumnName, expColumnType = None):\n  label = \"{}:{}\".format(expColumnName, expColumnType)\n  key = \"{} contains {}\".format(what, label)\n\n  try:\n    actualType = df.schema[expColumnName].dataType.typeName()\n    \n    if expColumnType == None: \n      testResults[key] = (True, \"validated\")\n      print(\"\"\"{}: validated\"\"\".format(key))\n    elif actualType == expColumnType:\n      testResults[key] = (True, \"validated\")\n      print(\"\"\"{}: validated\"\"\".format(key))\n    else:\n      answerStr = \"{}:{}\".format(expColumnName, actualType)\n      testResults[key] = (False, answerStr)\n      print(\"\"\"{}: NOT matching ({})\"\"\".format(key, answerStr))\n  except:\n      testResults[what] = (False, \"-not found-\")\n      print(\"{}: NOT found\".format(key))\n\n# Validate an answer\ndef validateYourAnswer(what, expectedHash, answer):\n  # Convert the value to string, remove new lines and carriage returns and then escape quotes\n  if (answer == None): answerStr = \"null\"\n  elif (answer is True): answerStr = \"true\"\n  elif (answer is False): answerStr = \"false\"\n  else: answerStr = str(answer)\n\n  hashValue = toHash(answerStr)\n  \n  if (hashValue == expectedHash):\n    testResults[what] = (True, answerStr)\n    print(\"\"\"{} was correct, your answer: {}\"\"\".format(what, answerStr))\n  else:\n    testResults[what] = (False, answerStr)\n    print(\"\"\"{} was NOT correct, your answer: {}\"\"\".format(what, answerStr))\n\n# Summarize results in the testResults dict\ndef summarizeYourResults():\n  html = \"\"\"<html><body><div style=\"font-weight:bold; font-size:larger; border-bottom: 1px solid #f0f0f0\">Your Answers</div><table style='margin:0'>\"\"\"\n\n  whats = list(testResults.keys())\n  whats.sort()\n  for what in whats:\n    passed = testResults[what][0]\n    answer = testResults[what][1]\n    color = \"green\" if (passed) else \"red\" \n    passFail = \"passed\" if (passed) else \"FAILED\" \n    html += \"\"\"<tr style='font-size:larger; white-space:pre'>\n                  <td>{}:&nbsp;&nbsp;</td>\n                  <td style=\"color:{}; text-align:center; font-weight:bold\">{}</td>\n                  <td style=\"white-space:pre; font-family: monospace\">&nbsp;&nbsp;{}</td>\n                </tr>\"\"\".format(what, color, passFail, answer)\n  html += \"</table></body></html>\"\n  displayHTML(html)\n\n# Log test results to a file\ndef logYourTest(path, name, value):\n  value = float(value)\n  if \"\\\"\" in path: raise AssertionError(\"The name cannot contain quotes.\")\n  \n  dbutils.fs.mkdirs(path)\n\n  csv = \"\"\" \"{}\",\"{}\" \"\"\".format(name, value).strip()\n  file = \"{}/{}.csv\".format(path, name).replace(\" \", \"-\").lower()\n  dbutils.fs.put(file, csv, True)\n\n# Load test results from log file\ndef loadYourTestResults(path):\n  from pyspark.sql.functions import col\n  return spark.read.schema(\"name string, value double\").csv(path)\n\n# Load test results from log file into a dict\ndef loadYourTestMap(path):\n  rows = loadYourTestResults(path).collect()\n  \n  map = dict()\n  for row in rows:\n    map[row[\"name\"]] = row[\"value\"]\n  \n  return map\n\n# ****************************************************************************\n# Utility method to determine whether a path exists\n# ****************************************************************************\n\ndef pathExists(path):\n  try:\n    dbutils.fs.ls(path)\n    return True\n  except:\n    return False\n  \n# ****************************************************************************\n# Utility method for recursive deletes\n# Note: dbutils.fs.rm() does not appear to be truely recursive\n# ****************************************************************************\n\ndef deletePath(path):\n  files = dbutils.fs.ls(path)\n\n  for file in files:\n    deleted = dbutils.fs.rm(file.path, True)\n    \n    if deleted == False:\n      if file.is_dir:\n        deletePath(file.path)\n      else:\n        raise IOError(\"Unable to delete file: \" + file.path)\n  \n  if dbutils.fs.rm(path, True) == False:\n    raise IOError(\"Unable to delete directory: \" + path)\n\n# ****************************************************************************\n# Utility method to clean up the workspace at the end of a lesson\n# ****************************************************************************\n\ndef classroomCleanup(daLogger:object, courseType:str, username:str, moduleName:str, lessonName:str, dropDatabase:str): \n  import time\n\n  actions = \"\"\n  \n  # Stop any active streams\n  for stream in spark.streams.active:\n    stream.stop()\n    \n    # Wait for the stream to stop\n    queries = list(filter(lambda query: query.name == stream.name, spark.streams.active))\n    \n    while (len(queries) > 0):\n      time.sleep(5) # Give it a couple of seconds\n      queries = list(filter(lambda query: query.name == stream.name, spark.streams.active))\n\n    actions += f\"\"\"<li>Terminated stream: <b>{stream.name}</b></li>\"\"\"\n  \n  # Drop all tables from the specified database\n  database = getDatabaseName(courseType, username, moduleName, lessonName)\n  try:\n    tables = spark.sql(\"show tables from {}\".format(database)).select(\"tableName\").collect()\n    for row in tables:\n      tableName = row[\"tableName\"]\n      spark.sql(\"drop table if exists {}.{}\".format(database, tableName))\n\n      # In some rare cases the files don't actually get removed.\n      time.sleep(1) # Give it just a second...\n      hivePath = \"dbfs:/user/hive/warehouse/{}.db/{}\".format(database, tableName)\n      dbutils.fs.rm(hivePath, True) # Ignoring the delete's success or failure\n      \n      actions += f\"\"\"<li>Dropped table: <b>{tableName}</b></li>\"\"\"\n\n  except:\n    pass # ignored\n\n  # The database should only be dropped in a \"cleanup\" notebook, not \"setup\"\n  if dropDatabase: \n    spark.sql(\"DROP DATABASE IF EXISTS {} CASCADE\".format(database))\n    \n    # In some rare cases the files don't actually get removed.\n    time.sleep(1) # Give it just a second...\n    hivePath = \"dbfs:/user/hive/warehouse/{}.db\".format(database)\n    dbutils.fs.rm(hivePath, True) # Ignoring the delete's success or failure\n    \n    actions += f\"\"\"<li>Dropped database: <b>{database}</b></li>\"\"\"\n\n  # Remove any files that may have been created from previous runs\n  path = getWorkingDir(courseType)\n  if pathExists(path):\n    deletePath(path)\n\n    actions += f\"\"\"<li>Removed working directory: <b>{path}</b></li>\"\"\"\n    \n  htmlMsg = \"Cleaning up the learning environment...\"\n  if len(actions) == 0: htmlMsg += \"no actions taken.\"\n  else:  htmlMsg += f\"<ul>{actions}</ul>\"\n  displayHTML(htmlMsg)\n  \n  if dropDatabase: daLogger.logEvent(\"Classroom-Cleanup-Final\")\n  else: daLogger.logEvent(\"Classroom-Cleanup-Preliminary\")\n\n  \n# Utility method to delete a database  \ndef deleteTables(database):\n  spark.sql(\"DROP DATABASE IF EXISTS {} CASCADE\".format(database))\n  \n    \n# ****************************************************************************\n# DatabricksAcademyLogger and Student Feedback\n# ****************************************************************************\n\nclass DatabricksAcademyLogger:\n  \n  def logEvent(self, eventId: str, message: str = None):\n    import time\n    import json\n    import requests\n\n    hostname = \"https://rqbr3jqop0.execute-api.us-west-2.amazonaws.com/prod\"\n    \n    try:\n      username = getUsername().encode(\"utf-8\")\n      moduleName = getModuleName().encode(\"utf-8\")\n      lessonName = getLessonName().encode(\"utf-8\")\n      event = eventId.encode(\"utf-8\")\n    \n      content = {\n        \"tags\":       dict(map(lambda x: (x[0], str(x[1])), getTags().items())),\n        \"moduleName\": getModuleName(),\n        \"lessonName\": getLessonName(),\n        \"orgId\":      getTag(\"orgId\", \"unknown\"),\n        \"username\":   getUsername(),\n        \"eventId\":    eventId,\n        \"eventTime\":  f\"{int(round(time.time() * 1000))}\",\n        \"language\":   getTag(\"notebookLanguage\", \"unknown\"),\n        \"notebookId\": getTag(\"notebookId\", \"unknown\"),\n        \"sessionId\":  getTag(\"sessionId\", \"unknown\"),\n        \"message\":    message\n      }\n      \n      response = requests.post( \n          url=f\"{hostname}/logger\", \n          json=content,\n          headers={\n            \"Accept\": \"application/json; charset=utf-8\",\n            \"Content-Type\": \"application/json; charset=utf-8\"\n          })\n      \n    except Exception as e:\n      pass\n\n    \ndef showStudentSurvey():\n  html = renderStudentSurvey()\n  displayHTML(html);\n\ndef renderStudentSurvey():\n  username = getUsername().encode(\"utf-8\")\n  userhome = getUserhome().encode(\"utf-8\")\n\n  moduleName = getModuleName().encode(\"utf-8\")\n  lessonName = getLessonName().encode(\"utf-8\")\n  lessonNameUnencoded = getLessonName()\n  \n  apiEndpoint = \"https://rqbr3jqop0.execute-api.us-west-2.amazonaws.com/prod\"\n\n  feedbackUrl = f\"{apiEndpoint}/feedback\";\n  \n  html = \"\"\"\n  <html>\n  <head>\n    <script src=\"https://files.training.databricks.com/static/js/classroom-support.min.js\"></script>\n    <script>\n<!--    \n      window.setTimeout( // Defer until bootstrap has enough time to async load\n        () => { \n          $(\"#divComment\").css(\"display\", \"visible\");\n\n          // Emulate radio-button like feature for multiple_choice\n          $(\".multiple_choicex\").on(\"click\", (evt) => {\n                const container = $(evt.target).parent();\n                $(\".multiple_choicex\").removeClass(\"checked\"); \n                $(\".multiple_choicex\").removeClass(\"checkedRed\"); \n                $(\".multiple_choicex\").removeClass(\"checkedGreen\"); \n                container.addClass(\"checked\"); \n                if (container.hasClass(\"thumbsDown\")) { \n                    container.addClass(\"checkedRed\"); \n                } else { \n                    container.addClass(\"checkedGreen\"); \n                };\n                \n                // Send the like/dislike before the comment is shown so we at least capture that.\n                // In analysis, always take the latest feedback for a module (if they give a comment, it will resend the like/dislike)\n                var json = {\n                  moduleName: \"GET_MODULE_NAME\", \n                  lessonName: \"GET_LESSON_NAME\", \n                  orgId:       \"GET_ORG_ID\",\n                  username:    \"GET_USERNAME\",\n                  language:    \"python\",\n                  notebookId:  \"GET_NOTEBOOK_ID\",\n                  sessionId:   \"GET_SESSION_ID\",\n                  survey: $(\".multiple_choicex.checked\").attr(\"value\"), \n                  comment: $(\"#taComment\").val() \n                };\n                \n                $(\"#vote-response\").html(\"Recording your vote...\");\n\n                $.ajax({\n                  type: \"PUT\", \n                  url: \"FEEDBACK_URL\", \n                  data: JSON.stringify(json),\n                  dataType: \"json\",\n                  processData: false\n                }).done(function() {\n                  $(\"#vote-response\").html(\"Thank you for your vote!<br/>Please feel free to share more if you would like to...\");\n                  $(\"#divComment\").show(\"fast\");\n                }).fail(function() {\n                  $(\"#vote-response\").html(\"There was an error submitting your vote\");\n                }); // End of .ajax chain\n          });\n\n\n           // Set click handler to do a PUT\n          $(\"#btnSubmit\").on(\"click\", (evt) => {\n              // Use .attr(\"value\") instead of .val() - this is not a proper input box\n              var json = {\n                moduleName: \"GET_MODULE_NAME\", \n                lessonName: \"GET_LESSON_NAME\", \n                orgId:       \"GET_ORG_ID\",\n                username:    \"GET_USERNAME\",\n                language:    \"python\",\n                notebookId:  \"GET_NOTEBOOK_ID\",\n                sessionId:   \"GET_SESSION_ID\",\n                survey: $(\".multiple_choicex.checked\").attr(\"value\"), \n                comment: $(\"#taComment\").val() \n              };\n\n              $(\"#feedback-response\").html(\"Sending feedback...\");\n\n              $.ajax({\n                type: \"PUT\", \n                url: \"FEEDBACK_URL\", \n                data: JSON.stringify(json),\n                dataType: \"json\",\n                processData: false\n              }).done(function() {\n                  $(\"#feedback-response\").html(\"Thank you for your feedback!\");\n              }).fail(function() {\n                  $(\"#feedback-response\").html(\"There was an error submitting your feedback\");\n              }); // End of .ajax chain\n          });\n        }, 2000\n      );\n-->\n    </script>    \n    <style>\n.multiple_choicex > img {    \n    border: 5px solid white;\n    border-radius: 5px;\n}\n.multiple_choicex.choice1 > img:hover {    \n    border-color: green;\n    background-color: green;\n}\n.multiple_choicex.choice2 > img:hover {    \n    border-color: red;\n    background-color: red;\n}\n.multiple_choicex {\n    border: 0.5em solid white;\n    background-color: white;\n    border-radius: 5px;\n}\n.multiple_choicex.checkedGreen {\n    border-color: green;\n    background-color: green;\n}\n.multiple_choicex.checkedRed {\n    border-color: red;\n    background-color: red;\n}\n    </style>\n  </head>\n  <body>\n    <h2 style=\"font-size:28px; line-height:34.3px\"><img style=\"vertical-align:middle\" src=\"https://files.training.databricks.com/images/105/logo_spark_tiny.png\"/>What did you think?</h2>\n    <p>Please let us know if you liked this notebook, <b>LESSON_NAME_UNENCODED</b></p>\n    <div id=\"feedback\" style=\"clear:both;display:table;\">\n      <span class=\"multiple_choicex choice1 thumbsUp\" value=\"positive\"><img style=\"width:100px\" src=\"https://files.training.databricks.com/images/feedback/thumbs-up.png\"/></span>\n      <span class=\"multiple_choicex choice2 thumbsDown\" value=\"negative\"><img style=\"width:100px\" src=\"https://files.training.databricks.com/images/feedback/thumbs-down.png\"/></span>\n      <div id=\"vote-response\" style=\"color:green; margin:1em 0; font-weight:bold\">&nbsp;</div>\n      <table id=\"divComment\" style=\"display:none; border-collapse:collapse;\">\n        <tr>\n          <td style=\"padding:0\"><textarea id=\"taComment\" placeholder=\"How can we make this lesson better? (optional)\" style=\"height:4em;width:30em;display:block\"></textarea></td>\n          <td style=\"padding:0\"><button id=\"btnSubmit\" style=\"margin-left:1em\">Send</button></td>\n        </tr>\n      </table>\n    </div>\n    <div id=\"feedback-response\" style=\"color:green; margin-top:1em; font-weight:bold\">&nbsp;</div>\n  </body>\n  </html>\n  \"\"\"\n\n  return (html.replace(\"GET_MODULE_NAME\", getModuleName())\n              .replace(\"GET_LESSON_NAME\", getLessonName())\n              .replace(\"GET_ORG_ID\", getTag(\"orgId\", \"unknown\"))\n              .replace(\"GET_USERNAME\", getUsername())\n              .replace(\"GET_NOTEBOOK_ID\", getTag(\"notebookId\", \"unknown\"))\n              .replace(\"GET_SESSION_ID\", getTag(\"sessionId\", \"unknown\"))\n              .replace(\"LESSON_NAME_UNENCODED\", lessonNameUnencoded)\n              .replace(\"FEEDBACK_URL\", feedbackUrl)\n         )\n\n# ****************************************************************************\n# Facility for advertising functions, variables and databases to the student\n# ****************************************************************************\ndef allDone(advertisements):\n  \n  functions = dict()\n  variables = dict()\n  databases = dict()\n  \n  for key in advertisements:\n    if advertisements[key][0] == \"f\" and spark.conf.get(f\"com.databricks.training.suppress.{key}\", None) != \"true\":\n      functions[key] = advertisements[key]\n  \n  for key in advertisements:\n    if advertisements[key][0] == \"v\" and spark.conf.get(f\"com.databricks.training.suppress.{key}\", None) != \"true\":\n      variables[key] = advertisements[key]\n  \n  for key in advertisements:\n    if advertisements[key][0] == \"d\" and spark.conf.get(f\"com.databricks.training.suppress.{key}\", None) != \"true\":\n      databases[key] = advertisements[key]\n  \n  html = \"\"\n  if len(functions) > 0:\n    html += \"The following functions were defined for you:<ul style='margin-top:0'>\"\n    for key in functions:\n      value = functions[key]\n      html += f\"\"\"<li style=\"cursor:help\" onclick=\"document.getElementById('{key}').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">{key}</span>\n        <span style=\"font-weight:bold\">(</span>\n        <span style=\"color: green; font-weight:bold; font-style:italic\">{value[1]}</span>\n        <span style=\"font-weight:bold\">)</span>\n        <div id=\"{key}\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">{value[2]}</div>\n        </li>\"\"\"\n    html += \"</ul>\"\n\n  if len(variables) > 0:\n    html += \"The following variables were defined for you:<ul style='margin-top:0'>\"\n    for key in variables:\n      value = variables[key]\n      html += f\"\"\"<li style=\"cursor:help\" onclick=\"document.getElementById('{key}').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">{key}</span>: <span style=\"font-style:italic; font-weight:bold\">{value[1]} </span>\n        <div id=\"{key}\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">{value[2]}</div>\n        </li>\"\"\"\n    html += \"</ul>\"\n\n  if len(databases) > 0:\n    html += \"The following database were created for you:<ul style='margin-top:0'>\"\n    for key in databases:\n      value = databases[key]\n      html += f\"\"\"<li style=\"cursor:help\" onclick=\"document.getElementById('{key}').style.display='block'\">\n        Now using the database identified by <span style=\"color: green; font-weight:bold\">{key}</span>: \n        <div style=\"font-style:italic; font-weight:bold\">{value[1]}</div>\n        <div id=\"{key}\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">{value[2]}</div>\n        </li>\"\"\"\n    html += \"</ul>\"\n\n  html += \"All done!\"\n  displayHTML(html)\n\n# ****************************************************************************\n# Placeholder variables for coding challenge type specification\n# ****************************************************************************\nclass FILL_IN:\n  from pyspark.sql.types import Row, StructType\n  VALUE = None\n  LIST = []\n  SCHEMA = StructType([])\n  ROW = Row()\n  INT = 0\n  DATAFRAME = sqlContext.createDataFrame(sc.emptyRDD(), StructType([]))\n\n# ****************************************************************************\n# Initialize the logger so that it can be used down-stream\n# ****************************************************************************\n\ndaLogger = DatabricksAcademyLogger()\ndaLogger.logEvent(\"Initialized\", \"Initialized the Python DatabricksAcademyLogger\")\n\ndisplayHTML(\"Defining courseware-specific utility methods...\")\n", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "4c55feb7-5041-4481-bde3-9539b358b529", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "6cb3fff9-fd5a-469d-bd22-f68aa300f02e", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "81f78c5b-1bd3-4b94-aa44-4efc7f1b1299", "iPythonMetadata": null, "inputWidgets": {}, "language": "python", "name": "Class-Utility-Methods", "origId": 0, "version": "NotebookV1"}