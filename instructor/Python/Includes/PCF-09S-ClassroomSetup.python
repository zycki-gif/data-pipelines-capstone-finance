{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%run ./Classroom-Setup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "27aea549-131d-412a-bd61-0c6bbb3d8a1b", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "76b947de-4200-4472-ad37-a7100e7ed6bb", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "loanRequestsPath = sourceDataPath + \"/bronze/loan_requests\"\ncourseAdvertisements[\"loanRequestsPath\"] = (\"v\", loanRequestsPath , loanRequestsPath)\n                                            \ninvestorsPath = sourceDataPath + \"/bronze/investors\"\ncourseAdvertisements[\"investorsPath\"] = (\"v\", investorsPath , investorsPath)\n\ntargetDirectory = workingDir + \"/silver/loan_requests\"\ncourseAdvertisements[\"targetDirectory\"] = (\"v\", targetDirectory , targetDirectory)\n\nbanned_investor_list = [26, 270, 1371]\ncourseAdvertisements[\"banned_investor_list\"] = (\"v\", banned_investor_list , \"Banned investors\")\n\nallDone(courseAdvertisements)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "5fa0dff2-e431-414e-9d8a-ea1253b28cbe", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "9f04f76c-a293-44fb-8eaa-f68fb0bafa83", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "# SETUP\nfrom pyspark.sql.functions import col, md5\nfrom pyspark.sql.functions import when, trim\n\ndef realityCheck(testMethod, spark, loanRequestsPath, investorsPath, targetDirectory):\n  from contextlib import redirect_stdout\n  from io import StringIO\n  from pyspark.sql.functions import col\n  \n  dumpOutput = StringIO()\n  with redirect_stdout(dumpOutput):\n    resultDF = testMethod(spark, loanRequestsPath, investorsPath, targetDirectory)\n\n    loan_requests = (spark.read.format(\"delta\").load(loanRequestsPath)\n                  .withColumn(\"request_time\", col(\"request_time\").cast(\"timestamp\"))\n                  .withColumn(\"valid_to\", col(\"valid_to\").cast(\"timestamp\"))\n                    )\n    res = (loan_requests\n           .withColumn(\"password_hash\", md5(col(\"password\"))).drop(col(\"password\")))\n    \n    res = res.withColumn(\"request_amount\", when(col(\"request_amount\") == \"\", None).otherwise(col(\"request_amount\")))\n    res = res.withColumn(\"missing_amount\", col(\"request_amount\").isNull())\n    \n    invalid_loan_requests = spark.read.format(\"delta\").load(loanRequestsPath)\n    \n    res = res.withColumn(\"banned_investor\", res[\"investor_id\"].isin(banned_investor_list))\n    \n    investors = spark.read.format(\"delta\").load(investorsPath).select(\"investor_id\",\"credit_score\")\n    correctDF = (res\n            .join(investors, on=\"investor_id\", how=\"left\")\n            .withColumn(\"loan_alert\", when(col(\"credit_score\") <= 1, \"red\").otherwise(\"green\"))\n            .drop(\"credit_score\"))\n    \n    updateSourceDataInDevMode(correctDF, \"silver/loan_requests\")\n    \n  def read_delta():\n    try:\n      return spark.read.format(\"delta\").load(targetDirectory)\n    except Exception:\n      return None\n  \n  deltaTable = read_delta()\n\n  tests = TestSuite()\n  \n  tests.addTest(TestCase(id=\"PCF-11S-A\", description = \"Returns correct schema\", \n           testFunction = lambda: compareSchemas(resultDF.schema, correctDF.schema, testColumnOrder=False, testNullable=True))),\n  tests.addTest(TestCase(id=\"PCF-11S-B\", description = \"Returns DataFrame with correct number of rows\",              \n           testFunction = lambda: resultDF.count() == correctDF.count())),\n  tests.addTest(TestCase(id=\"PCF-11S-C\", description = \"Returns DataFrame with correct results\", \n           testFunction = lambda: compareDataFramesLimited(resultDF, correctDF))),\n  tests.addTest(TestCase(id=\"PCF-11S-D\", description = \"Silver table in place\",\n           testFunction = lambda: deltaTable is not None)),\n  tests.addTest(TestCase(id=\"PCF-11S-E\", description = \"Silver table has correct content\",\n           testFunction = lambda: compareDataFramesLimited(deltaTable, correctDF)))\n\n  \n  tests.displayResults()\n\ndisplayHTML(\"\"\"\nDeclared the following function:\n  <li><span style=\"color:green; font-weight:bold\">realityCheck</span></li>\n\"\"\")\n", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "6c714902-6f14-49a1-af2a-a4a9477d96ca", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "47413fd3-18c7-4d89-bc62-6444ce669b8e", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 3, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "a843a358-5d9c-47ab-8c6f-93b3799ae2c6", "iPythonMetadata": null, "inputWidgets": {}, "language": "python", "name": "PCF-09S-ClassroomSetup", "origId": 0, "version": "NotebookV1"}