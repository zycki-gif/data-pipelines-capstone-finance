{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%run ./Classroom-Setup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "988b38aa-4be8-45e7-b774-ee5920f8b50a", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "412a5fa6-bc42-41fd-8162-3fa5a3d9a9f7", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "bronzeStockOrdersPath = sourceDataPath + \"/bronze/stock_orders\"\ncourseAdvertisements[\"bronzeStockOrdersPath\"] = (\"v\", bronzeStockOrdersPath , bronzeStockOrdersPath)\n\ntargetDirectory = workingDir + \"/silver/stock_orders_cleansed\"\ncourseAdvertisements[\"targetDirectory\"] = (\"v\", targetDirectory , targetDirectory)\n\ndef realityCheck(testMethod, spark, bronzeStockOrdersPath, targetDirectory):\n  from contextlib import redirect_stdout\n  from io import StringIO\n  from pyspark.sql.window import Window\n  from pyspark.sql.functions import rank, col, from_unixtime, year, month, dayofmonth, dayofweek\n  \n  dumpOutput = StringIO()\n  with redirect_stdout(dumpOutput):\n    resultDF = testMethod(spark, bronzeStockOrdersPath, targetDirectory)\n    \n    stockOrders = spark.read.format(\"delta\").load(bronzeStockOrdersPath)\n    res = stockOrders.withColumn(\n      \"rank\", rank().over(Window.partitionBy(\"transaction_id\").orderBy(col(\"ordertime\")))\n    ).filter(col(\"rank\") == 1).drop(\"rank\")\n    \n    correctDF = (res\n        .withColumn(\"order_timestamp\", from_unixtime(\"ordertime\").cast(\"timestamp\"))\n        .withColumn(\"year\", year(col(\"order_timestamp\")))\n        .withColumn(\"month\", month(col(\"order_timestamp\")))\n        .withColumn(\"day\", dayofmonth(col(\"order_timestamp\")))\n        .withColumn(\"dow\", dayofweek(col(\"order_timestamp\")))\n          )\n\n    \n    updateSourceDataInDevMode(correctDF, \"silver/stock_orders\")\n \n  def read_delta():\n    try:\n      return spark.read.format(\"delta\").load(targetDirectory)\n    except Exception:\n      return None\n  \n  deltaTable = read_delta()\n\n  tests = TestSuite()\n  tests.addTest(TestCase(id=\"PCF-14S-A\", description = \"Returns correct schema\", \n           testFunction = lambda: compareSchemas(resultDF.schema, correctDF.schema, testColumnOrder=False, testNullable=True))),\n  tests.addTest(TestCase(id=\"PCF-14S-B\", description = \"Returns DataFrame with correct number of rows\",              \n           testFunction = lambda: resultDF.count() == correctDF.count())),\n  tests.addTest(TestCase(id=\"PCF-14S-C\", description = \"Returns DataFrame with correct results\", \n           testFunction = lambda: compareDataFramesLimited(resultDF.drop('order_timestamp'), correctDF.drop('order_timestamp')))),  # Dropping order_timestamp as it uses the current_timestamp function, which is changing\n  tests.addTest(TestCase(id=\"PCF-14S-D\", description = \"Silver table in place\",\n           testFunction = lambda: deltaTable is not None)),\n  tests.addTest(TestCase(id=\"PCF-14S-E\", description = \"Silver table has correct content\",\n           testFunction = lambda: compareDataFramesLimited(deltaTable.drop(\"order_timestamp\"), correctDF.drop(\"order_timestamp\"))))  # Dropping order_timestamp as it uses the current_timestamp function, which is changing\n\n  \n  tests.displayResults()\n\nallDone(courseAdvertisements)\n", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "2647bf73-2cb9-4516-aa12-d7736fd0b38e", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "340eaba9-04ea-4dac-a7c0-38dd69f2aa7e", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "40f1959b-c40f-42b8-839a-390e76a52922", "iPythonMetadata": null, "inputWidgets": {}, "language": "python", "name": "PCF-11S-ClassroomSetup", "origId": 0, "version": "NotebookV1"}