{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%md-sandbox\n\n<div style=\"text-align: center; line-height: 0; padding-top: 9px;\">\n  <img src=\"https://databricks.com/wp-content/uploads/2018/03/db-academy-rgb-1200px.png\" alt=\"Databricks Learning\" style=\"width: 1200px\">\n</div>", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "313f6dbb-debe-462f-8528-3aa3eddfc66c", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "5e5be193-3864-48f7-817d-fa342a3b5937", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%md-sandbox\n<img src=\"https://files.training.databricks.com/images/Apache-Spark-Logo_TM_200px.png\" style=\"float: left: margin: 20px\"/>\n\nWe are going to update our investors' credit scores by using the latest macroeconomic data received from the central bank.\n\n# Bronze To Silver - Investors\n\n## In this exercise you will:\n* Find out how to read from the bronze layer \n* Learn to create and rename columns\n* Practice using the `Row` object to compute with values on the Driver\n* Practice using `when` and `otherwise` to express conditions with Spark\n* Combine data available in a DataFrame and on the Driver with `lit`\n* Get familiar with writing out to Delta format\n\n## Prerequisites\n* Web browser: **Chrome**\n* A cluster configured with **8 cores** and **DBR 7.0**", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "64033202-4560-407a-85fa-4b055fa3d2f8", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "dcff605c-4caa-4f13-85a3-4c9f73fe27b0", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%md-sandbox\n<h2 style=\"color:red\">Instructor Note</h2>\n\n\n\nThings to talk about:\n- silver level tables in detail, including:\n  - their purpose:\n    - clean, filter, deduplicate, fix bronze tables to create reliable base tables\n    - introduce newly engineered features, potentially using aggregated results as well\n    - provide all the required transformations to generate gold layer tables\n  - what they are and what they aren't:\n    - transformed tables to use as a basis of final tables\n    - not bronze tables, every problem is fixed, every new feature is created\n    - not gold tables, no zoomed in views and super-aggregated 10 row result tables\n  - optionally questions if an operation is silver level or not:\n    - stock list exported from the trading system\n    - top 3 most popularly traded stock type\n    - trader list with normalized names and added regional monetical statistics\n- talk about the goal:\n  - what are we building right now: We now use the 3rd party data to update our investor's credit score using a computed [macroeconomic metric](https://en.wikipedia.org/wiki/Economic_indicator).\n  - why is it useful: we'll always have up-to-date information about our investors\n- describe how can we use a single extracted value from a table (Row + lit)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "a21a0a39-edc8-4f74-9486-ae8ca7852752", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "54ab45f8-aa59-413b-aec3-77db8aed22d2", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 3, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%md\n## ![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) Classroom-Setup<br>\n\nFor each lesson to execute correctly, please make sure to run the **`Classroom-Setup`** cell at the start of each lesson (see the next cell) and the **`Classroom-Cleanup`** cell at the end of each lesson.", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "90ec93c7-e244-459b-bbb5-bdbc444bb13b", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "1428f6c9-82c9-4921-8e07-89248ca307fc", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 4, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%run ./Includes/PCF-07S-ClassroomSetup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "8b9472ac-8f55-4e79-9c27-7dff63a96ea1", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "0205ba21-175b-4e0f-a4f1-14fdb8e589cf", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 5, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%md\n## ![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) Steps to complete<br>\nImplement the **`challenge()`** function to achieve the following:\n- Read the macroeconomic data from **`macroDataPath`** into a DataFrame. \n- The source contains all historical macroeconomic data. However, we only need the row with the latest date.\n- Collect the row with the latest date to the driver and assign it to a variable.\n- Compute the metric using the elements of this row. Here is the formula for the metric:\n  * The formula will multiply several columns and divide them by the country's GDP.\n  * metric = (fedfunds X dexuseu X unrate X dgs10 X a191rl1q225sbea X indpro X bamlh0a0hym2) / \"gdp\"\n- Now we are ready to bring in the Investors. Read the **`investorsPath`** into a DataFrame.\n- We only need the  **`investor_id`**, **`name`**, **`education`**, **`credit_score`**, **`subscription_id`**, **`risk_score`** and **`fav_stocks`** fields from Investors.\n- Update the **`credit_score`** column by adding the metric you computed. E.g., if an investor's credit score is 3 and the metric is 0.2, the new credit score will be 3.2.\n- There is a condition for updated credit scores: they must be between 0 and 10. Make sure that they don't exceed 10 or go below 0. In case it's above 10, set the value to 10. In case it's below 0, set the value to 0.\n- Write the result to **`targetDirectory`** as a Delta table, using the overwrite mode and overwrite schema method.\n- Return the resulting DataFrame.\n\n<p> **`macroDataPath`**, **`investorsPath`** and **`targetDirectory`** are already defined in your environment.", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "7567b528-bf6b-4d16-92cc-388179fdd930", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "bb9fb457-b0f2-4cc2-9b9c-e4b5cae7fc7a", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 6, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "# ANSWER\n\ndef solution(spark, macroDataPath, investorsPath, targetDirectory):\n  from pyspark.sql.functions import max, col, lit, when\n  \n  # Read the macroeconomic data from `macroDataPath`.\n  macro = (spark.read.format('delta').load(macroDataPath))\n  \n  # Collect the row with the latest date and assign it to a variable.\n  maxDate = macro.select(max(col(\"date\"))).collect()\n\n  macroRow = (macro\n               .filter(col(\"date\") == maxDate[0][0])\n              ).collect()[0]\n  \n  # Compute the metric using the elements of the row above, using the formula below:\n  #\u00a0metric = (fedfunds X dexuseu X unrate X dgs10 X a191rl1q225sbea X indpro X bamlh0a0hym2) / gdp\n  metric = (macroRow[\"fedfunds\"] * macroRow[\"dexuseu\"] * macroRow[\"unrate\"] \n            * macroRow[\"dgs10\"] * macroRow[\"a191rl1q225sbea\"] * macroRow[\"indpro\"] * macroRow[\"bamlh0a0hym2\"]\n            /  macroRow[\"gdp\"]\n           )\n  # Read Investors from the `investorsPath`. \n  # We only need the `investor_id`, `name`, `education`, `credit_score`, `subscription_id`, `risk_score` and `fav_stocks` fields from Investors.\n  # Update the `credit_score` column by adding the metric you computed previously.\n  # Fix credit scores: they must be between 0 and 10. Make sure that they don't exceed 10 or go below 0. In case it's above 10, set the value to 10. In case it's below 0, set the value to 0.\n  investorsDF = (spark.read.format(\"delta\").load(investorsPath)\n                .select(\"investor_id\", \"name\", \"education\", \"credit_score\", \"subscription_id\", \"risk_score\", \"fav_stocks\")\n                .withColumn(\"credit_score\", (col(\"credit_score\") + lit(metric)))\n                .withColumn(\"credit_score\", when(col(\"credit_score\") > 10, lit(10)).otherwise(col(\"credit_score\")))\n                .withColumn(\"credit_score\", when(col(\"credit_score\") < 0, lit(0)).otherwise(col(\"credit_score\")))\n                )\n  # Write the result to targetDirectory as a Delta table, using the overwrite mode and overwrite schema method.\n  investorsDF.write.mode(\"overwrite\").format(\"delta\").option(\"overwriteSchema\", \"true\").save(targetDirectory)\n  \n  # Return the resulting DataFrame.\n  return investorsDF\n\nsolutionDF = solution(spark, macroDataPath, investorsPath, targetDirectory)\ndisplay(solutionDF)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "e1348db7-20e8-4181-8979-7f044376017d", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "c3161a0c-ae03-4039-a046-fae7cc901026", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 7, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%md\n<h2><img src=\"https://files.training.databricks.com/images/105/logo_spark_tiny.png\"> Reality Check</h2>\n\nRun the following cell to make sure you are on track:", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "ce6526ea-fd70-4471-b5f0-1f1f47240c77", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "954984b7-40a4-4db3-ad9e-78d74f05107a", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 8, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "# ANSWER - Test your solution\nrealityCheck(solution, spark, macroDataPath, investorsPath, targetDirectory)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "d2392cdf-9d66-463d-9108-2709e115c4ff", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "03253760-16af-44ab-959c-87cf22ed265c", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 9, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%md\n## ![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) Classroom-Cleanup<br>\n\nRun the **`Classroom-Cleanup`** cell below to remove any artifacts created by this lesson.", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "95b9d7a5-c278-4c15-9553-4520bc32ffe7", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "d15e4216-c4f6-4eb9-af61-2a51dd805bf5", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 10, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%run ./Includes/Classroom-Cleanup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "2fde705a-9689-4698-8230-fece643a6a05", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "a5858dbb-ec85-49e8-95ed-33fa01b8bfad", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 11, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%md\n## <img src=\"https://files.training.databricks.com/images/105/logo_spark_tiny.png\"> Next Steps\n\nStart the next challenge, [Investors 2]($./PCF 08S - Investors 2)\n", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "eb2e077b-b331-4307-b482-bc1d705c8f40", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "89bc7078-ba21-4df1-8a6e-06cb10d99f61", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 12, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "%md-sandbox\n&copy; 2020 Databricks, Inc. All rights reserved.<br/>\nApache, Apache Spark, Spark and the Spark logo are trademarks of the <a href=\"http://www.apache.org/\">Apache Software Foundation</a>.<br/>\n<br/>\n<a href=\"https://databricks.com/privacy-policy\">Privacy Policy</a> | <a href=\"https://databricks.com/terms-of-use\">Terms of Use</a> | <a href=\"http://help.databricks.com/\">Support</a>", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "e6d30dc2-18e3-4e73-b471-82fab2ca8390", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "48988344-1e00-447e-9b49-ecb38d1b226e", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 13, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "5430dcdb-d6dc-4de5-8b5f-d7aacc32f8b2", "iPythonMetadata": null, "inputWidgets": {}, "language": "python", "name": "PCF 07S - Investors", "origId": 0, "version": "NotebookV1"}