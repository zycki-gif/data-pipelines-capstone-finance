{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%run ./Classroom-Setup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "3b46ee25-40d2-47b3-968c-8a0cf1302c59", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "063b2f92-50c0-4197-8191-8db4148ad414", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "val bronzeStockOrdersPath = sourceDataPath + \"/bronze/stock_orders\"\ncourseAdvertisements(\"bronzeStockOrdersPath\") = (\"v\", bronzeStockOrdersPath , bronzeStockOrdersPath)\n\nval targetDirectory = workingDir + \"/silver/stock_orders_cleansed\"\ncourseAdvertisements(\"targetDirectory\") = (\"v\", targetDirectory , targetDirectory)\n\nimport org.apache.spark.sql.SparkSession\ndef realityCheck(testMethod:(SparkSession, String, String) => DataFrame, spark:SparkSession, bronzeStockOrdersPath:String, targetDirectory:String): Unit = {\n  import org.apache.spark.sql.functions._\n  import org.apache.spark.sql.types._\n  import java.io.ByteArrayOutputStream\n  import org.apache.spark.sql.expressions.Window\n  \n  val resultDF = testMethod(spark, bronzeStockOrdersPath, targetDirectory)\n  \n  val stockOrders = spark.read.format(\"delta\").load(bronzeStockOrdersPath)\n  val res = stockOrders\n  val res2 = res.withColumn(\n       \"rank\", rank().over(Window.partitionBy(\"transaction_id\").orderBy(col(\"ordertime\")))\n                    ).filter(col(\"rank\") === 1).drop(\"rank\")\n  \n  val correctDF = (res2.withColumn(\"order_timestamp\", from_unixtime(col(\"ordertime\")).cast(\"timestamp\"))\n            .withColumn(\"year\", year(col(\"order_timestamp\")))\n            .withColumn(\"month\", month(col(\"order_timestamp\")))\n            .withColumn(\"day\", dayofmonth(col(\"order_timestamp\")))\n            .withColumn(\"dow\", dayofweek(col(\"order_timestamp\")))\n             )\n \n  def read_delta() : DataFrame = {\n      try {\n        spark.read.format(\"delta\").load(targetDirectory)\n      } catch { \n        case _: Throwable => spark.emptyDataFrame \n      }\n  }\n  \n  val resultOutput = new ByteArrayOutputStream\n  val correctOutput = new ByteArrayOutputStream\n\n  Console.withOut(resultOutput) {testMethod(spark, bronzeStockOrdersPath, targetDirectory)}\n  Console.withOut(correctOutput) {correctDF.show()}\n  \n  val deltaTable = read_delta()\n  \n  val tests = new TestSuite()\n  tests.addTest(TestCase(id=\"PCF-14S-A\", description=\"Returns correct schema\",\n           testFunction = () => compareSchemas(resultDF.schema, correctDF.schema, testColumnOrder=false, testNullable=true)))\n  tests.addTest(TestCase(id=\"PCF-14S-B\", description=\"Returns DataFrame with correct number of rows\",     \n           testFunction = () => resultDF.count == correctDF.count))\n  tests.addTest(TestCase(id=\"PCF-14S-C\", description=\"Returns DataFrame with correct results\", \n           testFunction = () => compareDataFramesLimited(resultDF.drop(\"order_timestamp\"), correctDF.drop(\"order_timestamp\"))))  // Dropping order_timestamp as it uses the current_timestamp function, which is changing\n  tests.addTest(TestCase(id=\"PCF-14S-D\", description = \"Delta table in place\",\n           testFunction = () => !deltaTable.isEmpty))\n  tests.addTest(TestCase(id=\"PCF-14S-E\", description = \"Delta table has correct content\",\n           testFunction = () => compareDataFramesLimited(deltaTable.drop(\"order_timestamp\"), correctDF.drop(\"order_timestamp\"))))  // Dropping order_timestamp as it uses the current_timestamp function, which is changing\n\n  tests.displayResults()\n\n}\nallDone(courseAdvertisements)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "77ad8f52-5ff1-42d9-aaa4-3470f8f79b36", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "88c0ce1b-6109-4863-a408-6df5a0383d95", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "dc759adf-c5a2-4444-9a07-e208087f1982", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "94bcf8e4-3f5d-4ade-be56-56348ad54e63", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 3, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "5dedc166-8c6d-40ba-9b87-f9f13fd4d0f6", "iPythonMetadata": null, "inputWidgets": {}, "language": "scala", "name": "PCF-11S-ClassroomSetup", "origId": 0, "version": "NotebookV1"}