{"commands": [{"bindings": {}, "collapsed": false, "command": "\n%run ./Classroom-Setup", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "5a2f38c4-b169-4b93-9249-28eb90c6caf8", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "7745fa11-0b2c-42f9-a332-9b782803cafb", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 1, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "val loanRequestsPath = sourceDataPath + \"/bronze/loan_requests\"\ncourseAdvertisements(\"loanRequestsPath\") = (\"v\", loanRequestsPath , loanRequestsPath)                                     \n\nval investorsPath = sourceDataPath + \"/bronze/investors\"\ncourseAdvertisements(\"investorsPath\") = (\"v\", investorsPath , investorsPath)\n\nval targetDirectory = workingDir + \"/silver/loan_requests\"\ncourseAdvertisements(\"targetDirectory\") = (\"v\", targetDirectory , targetDirectory)\n\nval banned_investor_list = List(26, 270, 1371)\ncourseAdvertisements(\"banned_investor_list\") = (\"v\", banned_investor_list.mkString(\", \") , \"Banned Investors\")\n\nallDone(courseAdvertisements)", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "0bb4d3d0-20ff-4626-9209-8538738ec790", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "2528bcca-4874-49b2-9738-9dc71fbc4968", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 2, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "// SETUP\nimport org.apache.spark.sql.SparkSession\n\ndef realityCheck(testMethod:(SparkSession, String, String, String) => DataFrame, spark:SparkSession, loanRequestsPath:String, investorsPath:String, targetDirectory:String): Unit = {\n  import org.apache.spark.sql.functions._\n  import org.apache.spark.sql.types._\n  \n  val resultDF = testMethod(spark, loanRequestsPath, investorsPath, targetDirectory)\n  \n  val loan_requests = (spark.read.format(\"delta\").load(loanRequestsPath)\n                  .withColumn(\"request_time\", col(\"request_time\").cast(\"timestamp\"))\n                  .withColumn(\"valid_to\", col(\"valid_to\").cast(\"timestamp\"))\n                      )\n  \n  val res = (loan_requests\n           .withColumn(\"password_hash\", md5($\"password\")).drop($\"password\")\n           .withColumn(\"request_amount\", when($\"request_amount\" === \"\", null).otherwise($\"request_amount\"))\n           .withColumn(\"missing_amount\", $\"request_amount\".isNull)\n           .withColumn(\"banned_investor\", col(\"investor_id\").isin(banned_investor_list:_*))\n            )\n  \n  val investors = spark.read.format(\"delta\").load(investorsPath).select(\"investor_id\",\"credit_score\")\n  \n  val correctDF = (res\n          .join(investors, \"investor_id\")\n          .withColumn(\"loan_alert\", when(col(\"credit_score\") <= 1, \"red\").otherwise(\"green\"))\n          .drop(\"credit_score\"))\n\n  def read_delta() : DataFrame = {\n      try {\n        spark.read.format(\"delta\").load(targetDirectory)\n      } catch { \n        case _: Throwable => spark.emptyDataFrame \n      }\n      \n  }\n  \n  val deltaTable = read_delta()\n  \n  val tests = new TestSuite()\n  tests.addTest(TestCase(id=\"PCF-11S-A\", description=\"Returns correct schema\",\n           testFunction = () => compareSchemas(resultDF.schema, correctDF.schema, testColumnOrder=false, testNullable=true)))\n  tests.addTest(TestCase(id=\"PCF-11S-B\", description=\"Returns DataFrame with correct number of rows\",              \n           testFunction = () => resultDF.count == correctDF.count))\n  tests.addTest(TestCase(id=\"PCF-11S-C\", description=\"Returns DataFrame with correct results\", \n           testFunction = () => compareDataFramesLimited(resultDF, correctDF)))\n  tests.addTest(TestCase(id=\"PCF-11S-D\", description = \"Delta table in place\",\n           testFunction = () => !deltaTable.isEmpty))\n  tests.addTest(TestCase(id=\"PCF-11S-E\", description = \"Silver table has correct content\",\n           testFunction = () => compareDataFramesLimited(deltaTable, correctDF)))\n  \n  tests.displayResults()\n  \n}\n  \ndisplayHTML(\"\"\"\nDeclared the following function:\n  <li><span style=\"color:green; font-weight:bold\">realityCheck</span></li>\n\"\"\")", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "f50a0be7-9d5b-474c-bec5-4335cd40bd81", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "4a21f3f0-8c21-4111-bd3c-9ae62bc94640", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 3, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}, {"bindings": {}, "collapsed": false, "command": "", "commandTitle": "", "commandType": "auto", "commandVersion": 0, "commentThread": [], "commentsVisible": false, "customPlotOptions": {}, "datasetPreviewNameToCmdIdMap": {}, "diffDeletes": [], "diffInserts": [], "displayType": "table", "error": null, "errorSummary": null, "finishTime": 0, "globalVars": {}, "guid": "63062b10-1be9-4c47-bef3-6b230a02f5c1", "height": "auto", "hideCommandCode": false, "hideCommandResult": false, "iPythonMetadata": null, "inputWidgets": {}, "latestUser": "", "latestUserId": null, "nuid": "40b4f6e7-50aa-4c11-87a8-eea874791758", "origId": 0, "parentHierarchy": [], "pivotAggregation": null, "pivotColumns": null, "position": 4, "results": null, "showCommandTitle": false, "startTime": 0, "state": "finished", "streamStates": {}, "submitTime": 0, "subtype": "command", "version": "CommandV1", "width": "auto", "workflows": [], "xColumns": null, "yColumns": null}], "dashboards": [], "globalVars": {}, "guid": "bebe340f-b513-4509-a181-8ddf073a9e9d", "iPythonMetadata": null, "inputWidgets": {}, "language": "scala", "name": "PCF-09S-ClassroomSetup", "origId": 0, "version": "NotebookV1"}